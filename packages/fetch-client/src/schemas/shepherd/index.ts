/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users/{userId}/": {
    /** @description Returns an account holder's information based on their user's id. Authorisation required */
    get: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Account found */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndUserResponse"];
          };
        };
        /** @description Account is deactivated */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
    /** @description Update a user's details. Authorisation required */
    put: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      requestBody: components["requestBodies"]["UserUpdateBody"];
      responses: {
        /**
         * @description User update success
         * <br/><br/>
         * User details saved. New email address initialised
         */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Update user details failed */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Account already exists */
        409: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Update user details failed validation checks */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusValidationResponse"];
          };
        };
      };
    };
    /** @description Hard delete user (be careful) */
    delete: operations["deleteUser"];
    /** @description Update a user's details. Authorisation required */
    patch: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      requestBody: components["requestBodies"]["UserUpdateBody"];
      responses: {
        /**
         * @description User update success
         * <br/><br/>
         * User details saved. New email address initialised
         */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Update user details failed */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Account already exists */
        409: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Update user details failed validation checks */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusValidationResponse"];
          };
        };
      };
    };
    parameters: {
      header?: {
        BrandToken?: components["parameters"]["BrandToken"];
        oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
      };
      path: {
        userId: components["parameters"]["UserId"];
      };
    };
  };
  "/users/email/{email}/": {
    /** @description Returns an account holder's information based on user's email address. Authorisation required */
    get: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          email: components["parameters"]["UserEmail"];
        };
      };
      responses: {
        /** @description Account found */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndUserResponse"];
          };
        };
        /** @description Account is deactivated */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/{userId}/email/{email}/": {
    /** @description Updates a user's account but will only overwrite the field if it is currently null or empty. Email must match the email for the user id's account */
    patch: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
          email: components["parameters"]["UserEmail"];
        };
      };
      /** @description Full request body is not required, but at least one field from the model must be sent. */
      requestBody?: {
        content: {
          "application/json": {
            surname?: components["schemas"]["UserSurname"];
            phone?: components["schemas"]["UserPhone"];
            mobile?: components["schemas"]["UserPhone"];
            address?: components["schemas"]["UserAddress"];
            address2?: components["schemas"]["UserAddress2"];
            town?: components["schemas"]["UserTown"];
            postcode?: components["schemas"]["UserPostcode"];
          };
        };
      };
      responses: {
        /** @description User update success */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Update user details failed */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Update user details failed validation checks */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusValidationResponse"];
          };
        };
      };
    };
  };
  "/users/{userId}/passwordReset/": {
    /** @description Sends an email to the user with a link to reset their password */
    post: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      /** @description Brand or subbrand can also be supplied, which will send a branded reset password email */
      requestBody?: {
        content: {
          "application/json": {
            brand?: components["schemas"]["UserOriginBrandId"];
            subbrand?: components["schemas"]["UserOriginSubBrandId"];
          };
        };
      };
      responses: {
        /** @description Password reset email sent */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/passwordReset/": {
    /** @description Sends an email to the user with a link to reset their password */
    post: {
      /** @description Requires user's email. Either brand or subbrand can also be supplied, which will send a branded reset password email */
      requestBody?: {
        content: {
          "application/json": {
            email?: components["schemas"]["UserEmail"];
            brand?: components["schemas"]["UserOriginBrandId"];
            subbrand?: components["schemas"]["UserOriginSubBrandId"];
          };
        };
      };
      responses: {
        /** @description Password reset email sent */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/{userId}/password/": {
    /** @description Updates a user's password with a new password */
    put: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      /** @description Requires user's old and new password */
      requestBody?: {
        content: {
          "application/json": {
            oldPassword?: components["schemas"]["UserPassword"];
            newPassword?: components["schemas"]["UserPassword"];
          };
        };
      };
      responses: {
        /** @description Password update success */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /**
         * @description Password incorrect
         * <br/><br/>
         * Password update failed
         */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /**
         * @description Old password is missing
         * <br/><br/>
         * Password failed validation checks
         */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/{userId}/verify/": {
    /** @description Verify password of user, used to ensure authed user is still active */
    post: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            password?: components["schemas"]["UserPassword"];
          };
        };
      };
      responses: {
        /** @description Credentials match */
        200: {
          content: never;
        };
        /** @description Credentials do not match */
        401: {
          content: never;
        };
      };
    };
  };
  "/users/{userId}/deactivateInitiate/": {
    /** @description Sends an email to a user with a link to deactivate their account */
    post: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      /** @description Requires user's password */
      requestBody?: {
        content: {
          "application/json": {
            password?: components["schemas"]["UserPassword"];
          };
        };
      };
      responses: {
        /** @description Deactivate account email sent */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Password incorrect */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/preRegister/": {
    /** @description This endpoint is typically used prior to full registration. It allows the user to input their email address and password, which is then checked to see if an account exists with the associated email. If one is found, it checks if the password is correct for the account. If it is correct, the API will return the user's data and an authorisation token associated to an active session */
    post: {
      /** @description Email must be supplied */
      requestBody?: {
        content: {
          "application/json": {
            email?: components["schemas"]["UserEmail"];
            password?: components["schemas"]["UserPassword"];
          };
        };
      };
      responses: {
        /** @description Login success */
        200: {
          content: {
            "application/json":
              | components["schemas"]["ApiStatusAndUserAndAuthorisationResponse"]
              | components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Account verification expired. Verification email sent */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Registration email or password missing */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/register/": {
    /** @description Creates a new user account. Returns the user payload and an authorisation token associated to an active session */
    post: {
      /** @description **Note**: _Age **or** Dob must be supplied. Dob takes priority over age if both are given. If Dob is supplied, this will mark the dobVerified flag to **1**_ */
      requestBody?: {
        content: {
          "application/json": {
            email?: components["schemas"]["UserEmail"];
            password?: components["schemas"]["UserPassword"];
            firstName?: components["schemas"]["UserFirstName"];
            surname?: components["schemas"]["UserSurname"];
            gender?: components["schemas"]["UserGender"];
            genderOther?: components["schemas"]["UserGenderOther"];
            dob?: components["schemas"]["UserDob"];
            age?: components["schemas"]["UserAge"];
            origin?: components["schemas"]["UserOriginSubBrandId"];
            testUser?: components["schemas"]["UserTestUser"];
            source?: components["schemas"]["UserSource"];
            sourceId?: components["schemas"]["UserSourceId"];
          };
        };
      };
      responses: {
        /** @description Account created */
        201: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndUserAndAuthorisationResponse"];
          };
        };
        /** @description Account already exists */
        409: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Registration data failed validation checks */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/login/": {
    /** @description Checks whether user credentials are correct. If correct, returns the account's data and an authorisation token associated to an active session. If user has not activated their account within the set time period, an email will be sent with a activation link */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            email?: components["schemas"]["UserEmail"];
            password?: components["schemas"]["UserPassword"];
          };
        };
      };
      responses: {
        /** @description Login success */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndUserAndAuthorisationResponse"];
          };
        };
        /** @description Account verification expired. Verification email sent */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Missing login credentials */
        422: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/{userId}/logout/": {
    /** @description Logs the user out of an active session, and also sends a *LOGGED_OUT* status to LAPI logs */
    post: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Logout success */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/emailList/": {
    /** @description Delete all existent user register */
    delete: {
      /** @description Email list of users to be deleted */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserEmailList"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmailListStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Malformed Data */
        460: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/isUserPremium/{userId}": {
    /** @description Return boolean considering whether the user is premium or not */
    get: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Valid user (active) with premium status true or false */
        200: {
          content: {
            "application/json": boolean;
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Invalid user (inactive) with premium status false */
        404: {
          content: {
            "application/json": boolean;
          };
        };
      };
    };
  };
  "/auth/refreshToken/": {
    /** @description Refresh a central authorisation token if a valid central JWT is sent in the header. Will invalidate the current JWT if a new token is created. Authorisation required. Central authorisation token accepted only */
    get: {
      responses: {
        /** @description Token refreshed */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndAuthorisationResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/auth/verifyToken/": {
    /** @description Verifies whether a central or brand token is valid. To pass verification, the token must have an active session associated to it. Authorisation required */
    post: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
        };
      };
      responses: {
        /** @description Token verified */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/auth/makeToken/": {
    /** @description Returns a central JWT when a matching user id and device id are supplied in the header. This is a one-time process only, so once a user has been issued with an authorisation token using their user id and device id, they will no longer be issued a new JWT on subsequent requests to this endpoint */
    get: {
      parameters: {
        header: {
          /** @description The user's id */
          UserId: string;
          /** @description The user's device id */
          DeviceId: string;
        };
      };
      responses: {
        /** @description Token created */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndAuthorisationResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
  };
  "/users/{userId}/authorisedApps": {
    /** @description Returns the authorised app for an account holder based on their user's id. Authorisation required */
    get: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Account found */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusAndAuthorisedAppsResponse"];
          };
        };
        /** @description Account is deactivated */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
    parameters: {
      header?: {
        BrandToken?: components["parameters"]["BrandToken"];
        oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
      };
      path: {
        userId: components["parameters"]["UserId"];
      };
    };
  };
  "/users/{userId}/authorisedApps/{OAuthClientUserAccessId}": {
    /** @description Deletes the link between a User and an Authorised App. Authorisation required */
    delete: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
          OAuthClientUserAccessId: components["parameters"]["OAuthClientUserAccessId"];
        };
      };
      responses: {
        /** @description Link between User and Authorised App deleted */
        204: {
          content: never;
        };
        /** @description Account is deactivated */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description No account exists */
        404: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
    parameters: {
      header?: {
        BrandToken?: components["parameters"]["BrandToken"];
        oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
      };
      path: {
        userId: components["parameters"]["UserId"];
        OAuthClientUserAccessId: components["parameters"]["OAuthClientUserAccessId"];
      };
    };
  };
  "/users/{userId}/resetPassword/{securityId}/{resetCodeId}/{resetCodeTimestamp}": {
    /** @description Verifies if a password reset code is valid */
    get: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
          securityId: components["parameters"]["SecurityId"];
          resetCodeId: components["parameters"]["ResetCodeId"];
          resetCodeTimestamp: components["parameters"]["ResetCodeTimestamp"];
        };
      };
      responses: {
        /** @description Valid reset password code */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Bad request or invalid reset link */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
    /** @description Reset an account password */
    post: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
          securityId: components["parameters"]["SecurityId"];
          resetCodeId: components["parameters"]["ResetCodeId"];
          resetCodeTimestamp: components["parameters"]["ResetCodeTimestamp"];
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            password?: components["schemas"]["UserPassword"];
          };
        };
      };
      responses: {
        /** @description Password update success */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
        /** @description Bad request or invalid reset link */
        400: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        userId: components["parameters"]["UserId"];
        securityId: components["parameters"]["SecurityId"];
        resetCodeId: components["parameters"]["ResetCodeId"];
        resetCodeTimestamp: components["parameters"]["ResetCodeTimestamp"];
      };
    };
  };
  "/users/{userId}/stripe/createCustomer/{stripePaymentMethodId}": {
    /** @description Create a customer in Stripe, attach a payment method then attach stripe user to RevenueCat */
    post: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
          stripePaymentMethodId: components["parameters"]["StripePaymentMethodId"];
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            promotionCodeId?: components["schemas"]["StripePromotionCodeId"];
            sourceId?: components["schemas"]["UserPaymentSource"];
            brandCode?: components["schemas"]["UserPremiumBrandCode"];
          };
        };
      };
      responses: {
        /** @description Stripe Customer created */
        200: {
          content: never;
        };
      };
    };
    parameters: {
      header?: {
        BrandToken?: components["parameters"]["BrandToken"];
        oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
      };
      path: {
        userId: components["parameters"]["UserId"];
        stripePaymentMethodId: components["parameters"]["StripePaymentMethodId"];
      };
    };
  };
  "/users/{userId}/stripe/paymentStatus": {
    /** @description Get the last4 digits of a Stripe customer default payment card */
    get: {
      parameters: {
        header?: {
          BrandToken?: components["parameters"]["BrandToken"];
          oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
        };
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Payment details found */
        200: {
          content: {
            "application/json": components["schemas"]["ApiStatusResponse"] &
              components["schemas"]["StripePaymentStatusResponse"];
          };
        };
      };
    };
    parameters: {
      header?: {
        BrandToken?: components["parameters"]["BrandToken"];
        oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
      };
      path: {
        userId: components["parameters"]["UserId"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApiStatusResponse: {
      /**
       * @description Response status
       * @enum {string}
       */
      status?: "success" | "error";
      /** @description Response status code */
      code?: number;
      /** @description Response status message */
      message?: string;
    };
    ApiStatusValidationResponse: components["schemas"]["ApiStatusResponse"] & {
      /** @description Validation errors that contain an array of validation messages */
      validationErrors?: {
        [key: string]: unknown;
      };
    };
    AuthorisationResponse: {
      authorisation?: {
        /** @description Central JWT authorisation token */
        token?: string;
        /**
         * @description Token expiry timestamp
         * @example 1537698603
         */
        expiry?: number;
      };
    };
    ApiStatusAndAuthorisationResponse: components["schemas"]["ApiStatusResponse"] &
      components["schemas"]["AuthorisationResponse"];
    ApiStatusAndUserResponse: components["schemas"]["ApiStatusResponse"] &
      components["schemas"]["UserResponse"];
    ApiStatusAndUserAndAuthorisationResponse: components["schemas"]["ApiStatusResponse"] &
      components["schemas"]["UserResponse"] &
      components["schemas"]["AuthorisationResponse"];
    ApiStatusAndAuthorisedAppsResponse: components["schemas"]["ApiStatusResponse"] &
      components["schemas"]["AuthorisedAppsResponse"];
    /** @description A list of first-party oAuth clients that the user has authorized */
    ClientList: components["schemas"]["OAuthClient"][];
    /**
     * @description Unique identifier for oAuth client
     * @example sonos
     */
    OAuthClient: string;
    UserResponse: {
      profile?: components["schemas"]["UserProfileWrapper"];
      address?: components["schemas"]["UserAddressWrapper"];
      contact?: components["schemas"]["UserContactWrapper"];
      miscellaneous?: components["schemas"]["UserMiscellaneousWrapper"];
    };
    AuthorisedAppsResponse: {
      clients?: components["schemas"]["UserAuthorisedAppWrapper"][];
    };
    UserAuthorisedAppWrapper: {
      id?: components["schemas"]["OAuthClientUserAccessId"];
      clientId?: components["schemas"]["OAuthClientId"];
      userId?: components["schemas"]["UserId"];
      scopes?: components["schemas"]["OAuthClientUserAccessGrantedScopes"];
      /**
       * Format: date
       * @example 2017-10-10 10:36:06
       */
      createdDate?: string;
      /**
       * Format: date
       * @example 2017-10-10 10:36:06
       */
      updatedDate?: string;
      /**
       * @description Human readbale client name
       * @example Amazon Alexa
       */
      clientName?: string;
    };
    UserProfileWrapper: {
      id?: components["schemas"]["UserId"];
      email?: components["schemas"]["UserEmail"];
      firstName?: components["schemas"]["UserFirstName"];
      surname?: components["schemas"]["UserSurname"];
      dob?: components["schemas"]["UserDob"];
      dobVerified?: components["schemas"]["UserDobVerified"];
      gender?: components["schemas"]["UserGender"];
      genderOther?: components["schemas"]["UserGenderOther"];
      age?: components["schemas"]["UserAge"];
    };
    UserAddressWrapper: {
      address?: components["schemas"]["UserAddress"];
      address2?: components["schemas"]["UserAddress2"];
      town?: components["schemas"]["UserTown"];
      postcode?: components["schemas"]["UserPostcode"];
    };
    UserContactWrapper: {
      email?: components["schemas"]["UserEmail"];
      phone?: components["schemas"]["UserPhone"];
      mobile?: components["schemas"]["UserPhone"];
    };
    UserMiscellaneousWrapper: {
      registerDate?: components["schemas"]["UserRegisterDate"];
      confirmDate?: components["schemas"]["UserConfirmDate"];
      originSubBrandId?: components["schemas"]["UserOriginSubBrandId"];
      originBrandId?: components["schemas"]["UserOriginBrandId"];
      originAggregatorBrandId?: components["schemas"]["UserOriginAggregatorBrandId"];
      testUser?: components["schemas"]["UserTestUser"];
      targetedAds?: components["schemas"]["UserTargetedAds"];
      deactivated?: components["schemas"]["UserDeactivated"];
      accountHolder?: components["schemas"]["UserAccountHolder"];
      confirmedAccount?: components["schemas"]["UserConfirmedAccount"];
      confirmGracePeriodExpired?: components["schemas"]["UserConfirmGracePeriodExpired"];
      premiumTrialUsed?: components["schemas"]["UserPremiumTrialUsed"];
      premiumState?: components["schemas"]["UserPremiumState"];
      premiumExpiresAt?: components["schemas"]["UserPremiumExpiresAt"];
      paymentProvider?: components["schemas"]["UserPaymentProvider"];
      paymentSource?: components["schemas"]["UserPaymentSource"];
      hash?: components["schemas"]["UserHash"];
      saltedHash?: components["schemas"]["UserSaltedHash"];
      clients?: components["schemas"]["ClientList"];
      onboarded?: components["schemas"]["UserOnboarded"];
    };
    /**
     * @description User's id
     * @example a571c708-b76d-a536-5bf1-d7480bb0a7e4
     */
    readonly UserId: string;
    /**
     * Format: email
     * @description User's email
     */
    UserEmail: string;
    /**
     * Format: password
     * @description User's password
     * @example password
     */
    UserPassword: string;
    /**
     * @description User's first name
     * @example Mike
     */
    UserFirstName: string;
    /**
     * @description User's surname
     * @example Smith
     */
    UserSurname: string;
    /**
     * Format: date
     * @description User's date of birth
     * @example 1997-10-10
     */
    UserDob: string;
    /**
     * @description Flag indicating whether user's date of birth has been verified
     * @enum {string}
     */
    readonly UserDobVerified: "0" | "1";
    /**
     * @description User's gender (m = male, f = female, n = non-binary, o = other, u = Rather not say)
     * @enum {string}
     */
    UserGender: "m" | "f" | "n" | "o" | "u";
    /**
     * @description Description of gender if other is specified
     * @example null
     */
    UserGenderOther: string | null;
    /**
     * @description User's age
     * @example 20
     */
    UserAge: string;
    /**
     * @description Address
     * @example Endeavour House
     */
    UserAddress: string | null;
    /**
     * @description Address
     * @example 189 Shaftesbury Avenue
     */
    UserAddress2: string | null;
    /**
     * @description Town
     * @example London
     */
    UserTown: string | null;
    /**
     * @description Postcode
     * @example WC2H 8JG
     */
    UserPostcode: string | null;
    /**
     * @description Contact number
     * @example 12345678901
     */
    UserPhone: string | null;
    /**
     * Format: date
     * @description Date user registered
     * @example 2017-10-10 10:36:06
     */
    readonly UserRegisterDate: string;
    /**
     * Format: date
     * @description Date user confirmed their account
     * @example null
     */
    readonly UserConfirmDate: string | null;
    /**
     * @description The origin subbrand id when user registered
     * @example ki1
     */
    UserOriginSubBrandId: string | null;
    /**
     * @description The origin brand code id when user registered
     * @example UK_KISS
     */
    UserOriginBrandId: string | null;
    /**
     * @description The origin aggregator brand code when user registered
     * @example UK_PLANETRADIO
     */
    UserOriginAggregatorBrandId: string | null;
    /**
     * @description Flag indicating whether user is a test user
     * @enum {string}
     */
    UserTestUser: "0" | "1";
    /**
     * @description Flag indicating whether user is a test user
     * @example Livestream
     */
    UserSource: string;
    /**
     * @description Identifies unique acquisition source of the user
     * @example Kiss Haunted House Party
     */
    UserSourceId: string;
    /**
     * @description Flag indicating whether user has given permission to receive targeted ads
     * @enum {string}
     */
    UserTargetedAds: "enabled" | "disabled";
    /**
     * @description Flag indicating whether user has deactivated their account
     * @enum {string}
     */
    readonly UserDeactivated: "0" | "1";
    /**
     * @description Flag indicating whether user is an account holder
     * @enum {string}
     */
    readonly UserAccountHolder: "1" | "0";
    /**
     * @description Flag indicating whether user has confirmed their account
     * @enum {string}
     */
    readonly UserConfirmedAccount: "0" | "1";
    /**
     * @description Flag indicating whether account activation grace period has expired
     * @enum {string}
     */
    readonly UserConfirmGracePeriodExpired: "0" | "1";
    /**
     * @description Flag indicating whether trial premium account has already been used
     * @example 1
     * @enum {string}
     */
    readonly UserPremiumTrialUsed: "0" | "1";
    /**
     * @description Flag indicating current account premium state
     * @example active
     * @enum {string}
     */
    UserPremiumState: "active" | "inactive" | "trial" | "cancelled";
    /**
     * @description When the user's currently premium subscription is due to expire
     * @example 2020-02-02 02:02:02
     */
    UserPremiumExpiresAt: string | null;
    /**
     * @description The payment interface for handling user payments
     * @example revenue-cat
     */
    UserPaymentProvider: string | null;
    /**
     * @description The payment gateway the user pays with
     * @example [
     *   "apple",
     *   "stripe",
     *   null
     * ]
     */
    UserPaymentSource: string | null;
    /**
     * @description Anonymous unique user identifier
     * @example 0c7e6a405862e402eb76a70f8a26fc732d07c32931e9fae9ab1582911d2e8a3b
     */
    UserHash: string;
    /**
     * @description Anonymous unique user identifier with salted key value
     * @example b3a8e2d1192851ba9eaf9e13923c700c7e6a405862e402eb76a70f8a26fc732d
     */
    UserSaltedHash: string;
    /**
     * @description The brand code associated with the subscription
     * @example UK_PLANETROCK
     */
    UserPremiumBrandCode: string;
    /**
     * @description The Stripe CustomerId of the user
     * @example [
     *   "cus_Indi6pULITOQqB"
     * ]
     */
    UserPremiumStripeCustomerId: string | null;
    UserEmailList: {
      /** @description List of user emails */
      emails?: string[];
    };
    /**
     * @description Flag indicating whether user has been onboarded
     * @enum {string}
     */
    UserOnboarded: "0" | "1";
    EmailListStatusResponse: {
      /**
       * @description Response status
       * @enum {string}
       */
      status?: "success" | "error";
      /** @description Response status code */
      code?: number;
      /** @description Response status message */
      message?: string;
      /** @description Response emails with respective status */
      data?: {
        additionalProperties?: {
          /**
           * @description Response status
           * @enum {string}
           */
          status?: "success" | "error";
          /** @description Response status code */
          code?: number;
          /** @description Response status message */
          message?: string;
        };
      };
    };
    /** @description OAuthClientUserAccessId id */
    readonly OAuthClientUserAccessId: number;
    /**
     * @description OAuthClientId
     * @example amazon-alexa-rsk
     */
    readonly OAuthClientId: string;
    /**
     * @description The scopes/permissions the client has
     * @example ["user:read","user:write"]
     */
    readonly OAuthClientUserAccessGrantedScopes: string;
    StripePaymentStatusResponse: {
      data?: {
        /**
         * @description The Stripe Customer Id
         * @example cus_J0QDuVA5N2DQ5S
         */
        customerId?: string;
        /** @description The last 4 digits of the default payment card */
        last4?: string;
      };
    };
    /**
     * @description Stripe Promotion Code Id
     * @example promo_1GgjnlClCIKljWvs0a29jxz1
     */
    StripePromotionCodeId: string | null;
  };
  responses: never;
  parameters: {
    /** @description BrandToken should have a value of 1 only if using a **brand** JWT for authorisation */
    BrandToken?: 0 | 1;
    /** @description oAuth2AccessToken should have a value of 1 if using an oAuth access token for authorisation */
    oAuth2AccessToken?: 0 | 1;
    /** @description User's ID */
    UserId: components["schemas"]["UserId"];
    /** @description User's email address. Email should be url encoded */
    UserEmail: components["schemas"]["UserEmail"];
    /** @description OAuthClientUserAccess ID */
    OAuthClientUserAccessId: components["schemas"]["OAuthClientUserAccessId"];
    /** @description User's security ID */
    SecurityId: string;
    /** @description First part of the user password reset code */
    ResetCodeId: string;
    /** @description Second part of the user password reset code */
    ResetCodeTimestamp: number;
    /**
     * @description The payment method from stripe
     * @example pm_1IES4mFAFCtOLRY0VpUUnAu8
     */
    StripePaymentMethodId: string;
  };
  requestBodies: {
    /**
     * @description Full request body is not required, but at least one field from the model must be sent.<br/><br/>
     * **Note**: _dob takes priority over age if both are given. User's dobVerified flag will be set to **1** if dob is supplied. Age value will not update the user's dob if dobVerified is **1**_
     */
    UserUpdateBody: {
      content: {
        "application/json": {
          email?: components["schemas"]["UserEmail"];
          firstName?: components["schemas"]["UserFirstName"];
          surname?: components["schemas"]["UserSurname"];
          dob?: components["schemas"]["UserDob"];
          age?: components["schemas"]["UserAge"];
          gender?: components["schemas"]["UserGender"];
          genderOther?: components["schemas"]["UserGenderOther"];
          phone?: components["schemas"]["UserPhone"];
          mobile?: components["schemas"]["UserPhone"];
          address?: components["schemas"]["UserAddress"];
          address2?: components["schemas"]["UserAddress2"];
          town?: components["schemas"]["UserTown"];
          postcode?: components["schemas"]["UserPostcode"];
          testUser?: components["schemas"]["UserTestUser"];
          targetedAds?: components["schemas"]["UserTargetedAds"];
          onboarded?: components["schemas"]["UserOnboarded"];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** @description Hard delete user (be careful) */
  deleteUser: {
    parameters: {
      header?: {
        BrandToken?: components["parameters"]["BrandToken"];
        oAuth2AccessToken?: components["parameters"]["oAuth2AccessToken"];
      };
      path: {
        userId: components["parameters"]["UserId"];
      };
    };
    responses: {
      /** @description User has been successfully deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiStatusResponse"];
        };
      };
    };
  };
}
