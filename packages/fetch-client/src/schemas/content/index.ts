/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/content/healthcheck": {
    get: operations["HealthCheckController_check"];
  };
  "/content/v1/regions/{regionId}/collections": {
    get: operations["CollectionController_getAll"];
  };
  "/content/v1/regions/{regionId}/collections/{collectionId}/items": {
    get: operations["CollectionController_getAllItems"];
  };
  "/content/v1/regions/{regionId}/collections/{collectionId}": {
    get: operations["CollectionController_getCollection"];
  };
  "/content/v1/regions/{regionId}/collections/{collectionId}/images": {
    get: operations["CollectionController_getCollectionImages"];
  };
  "/content/v1/regions/{regionId}/collections/{collectionId}/metadata": {
    get: operations["CollectionController_getCollectionMetadata"];
  };
  "/content/v1/regions/{regionId}/views": {
    get: operations["ViewController_getAll"];
  };
  "/content/v1/regions/{regionId}/views/{viewId}": {
    get: operations["ViewController_getOne"];
  };
  "/content/v1/regions/{regionId}/views/{viewId}/items": {
    get: operations["ViewController_getViewItems"];
  };
  "/content/v1/regions/{regionId}/tag-types": {
    get: operations["TagTypesController_getAll"];
  };
  "/content/v1/regions/{regionId}/tags": {
    get: operations["TagController_getAll"];
  };
  "/content/v1/regions/{regionId}/tags/{tagId}": {
    get: operations["TagController_getOne"];
  };
  "/content/v1/regions/{regionId}/tags/{tagId}/images": {
    get: operations["TagController_getAllImages"];
  };
  "/content/v1/regions/{regionId}/me/for-you": {
    get: operations["ForYouController_getView"];
  };
  "/content/v1/regions/{regionId}/me/for-you/items": {
    get: operations["ForYouController_getViewItems"];
  };
  "/content/v1/regions/{regionId}/fixed-views/for-you": {
    get: operations["ForYouController_getView"];
  };
  "/content/v1/regions/{regionId}/fixed-views/for-you/items": {
    get: operations["ForYouController_getViewItems"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CollectionDto: {
      id: number;
      regionId: number;
      code: string;
      name: string;
      /** @enum {string} */
      type: "curated" | "dynamic";
      /** @enum {string} */
      strategy: "AND" | "OR";
      /** @enum {string} */
      sortBy: "createdAt:DESC" | "createdAt:ASC" | "name:ASC" | "name:DESC";
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginationMeta: {
      /**
       * @description Total items per page
       * @example 20
       */
      itemsPerPage: number;
      /**
       * @description Total items
       * @example 100
       */
      totalItems: number;
      /**
       * @description Current page
       * @example 1
       */
      currentPage: number;
      /**
       * @description Total pages
       * @example 5
       */
      totalPages: number;
      /**
       * @description Used to sort results by pre-defined fields. <p>Usage: `...?sortBy=id:ASC`<p>
       * @example id:ASC
       */
      sortBy: string;
      /**
       * @description Used to sort results by pre-defined fields. <p>Usage: `...?sortBy=id:ASC`<p>
       * @example id:ASC
       */
      searchBy: string;
      /**
       * @description Search results by string value. <i>Note: Searchable fields must be pre-defined in the pagination query.</i> <p>Usage: `...?search=Absolute`</p>
       * @example Absolute
       */
      search: string;
      /**
       * @description Used to filter results by pre-defined fields. <p>Usage: `...?filter.id=$eq:1`</p>
       * @example {
       *   "id": "$eq:1"
       * }
       */
      filter: Record<string, never>;
    };
    PaginationLinks: {
      /**
       * @description Provides a url to the first page when it is available.
       * @example ...?page=1&limit=20&sortBy=id:ASC
       */
      first?: string;
      /**
       * @description Provides a url to the previous page when it is available.
       * @example ...?page=1&limit=20&sortBy=id:ASC
       */
      previous?: string;
      /**
       * @description Provides a url to the current page.
       * @example ...?page=1&limit=20&sortBy=id:ASC
       */
      current: string;
      /**
       * @description Provides a url to the next page when it is available.
       * @example ...?page=2&limit=20&sortBy=id:ASC
       */
      next?: string;
      /**
       * @description Provides a url to the last page when it is available.
       * @example ...?page=5&limit=20&sortBy=id:ASC
       */
      last?: string;
    };
    PaginatedCollectionDto: {
      data: components["schemas"]["CollectionDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    BaseEntity: Record<string, never>;
    CollectionItemDto: {
      id: number;
      /** @enum {string} */
      entityType:
        | "station"
        | "collection"
        | "show"
        | "show_episode"
        | "catch_up_episode"
        | "tag";
      collectionId: number;
      entityId: number;
      position: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
      collection?: components["schemas"]["CollectionDto"];
      show?: components["schemas"]["BaseEntity"];
      showEpisode?: components["schemas"]["BaseEntity"];
      catchUpEpisode?: components["schemas"]["BaseEntity"];
      station?: components["schemas"]["BaseEntity"];
      tag?: components["schemas"]["BaseEntity"];
    };
    PaginatedCollectionItemsDto: {
      data: components["schemas"]["CollectionItemDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    CollectionOutDto: {
      data: components["schemas"]["CollectionDto"];
    };
    NotFoundResponse: {
      /** @example 404 */
      statusCode: number;
      /**
       * @example {
       *   "404": "Not Found"
       * }
       */
      message: Record<string, never>;
    };
    EntityImageDto: {
      /** @enum {string} */
      entityType:
        | "region"
        | "station"
        | "user"
        | "brand"
        | "track"
        | "artist"
        | "show"
        | "catch_up_episode"
        | "show_episode"
        | "collection"
        | "tag";
      /** @enum {string} */
      key:
        | "header-logo"
        | "header-logo-svg"
        | "listen-bar-logo"
        | "hero-image"
        | "mobile-hero-image"
        | "white-logo"
        | "lock-screen";
      id: number;
      entityId: number;
      url: string;
      width: number;
      height: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginatedEntityImageDto: {
      data: components["schemas"]["EntityImageDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    EntityMetadataDto: {
      /** @enum {string} */
      entityType:
        | "region"
        | "station"
        | "user"
        | "brand"
        | "track"
        | "artist"
        | "show"
        | "catch_up_episode"
        | "show_episode"
        | "collection"
        | "tag";
      /** @enum {string} */
      key:
        | "header-logo"
        | "header-logo-svg"
        | "listen-bar-logo"
        | "hero-image"
        | "mobile-hero-image"
        | "white-logo"
        | "lock-screen";
      id: number;
      entityId: number;
      value: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginatedEntityMetadataDto: {
      data: components["schemas"]["EntityMetadataDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    ViewDto: {
      id: number;
      regionId: number;
      code: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginatedViewDto: {
      data: components["schemas"]["ViewDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    ViewItemDto: {
      id: number;
      viewId: number;
      component: Record<string, never>;
      /** @enum {string} */
      entityType:
        | "station"
        | "show"
        | "show_episode"
        | "catch_up_episode"
        | "collection";
      entityId: number;
      position: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginatedViewItemDto: {
      data: components["schemas"]["ViewItemDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    TagTypesDto: {
      id: number;
      regionId: number;
      code: string;
      name: string;
      hidden: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginatedTagTypesDto: {
      data: components["schemas"]["TagTypesDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    TagDto: {
      id: number;
      tagTypeId: number;
      code: string;
      name: string;
      hidden: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      deletedAt: string | null;
    };
    PaginatedTagDto: {
      data: components["schemas"]["TagDto"][];
      meta: components["schemas"]["PaginationMeta"];
      links: components["schemas"]["PaginationLinks"];
    };
    TagOutDto: {
      data: components["schemas"]["TagDto"];
    };
    FailedResponse: {
      statusCode: number;
      message: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  HealthCheckController_check: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  CollectionController_getAll: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?: "regionId:ASC" | "regionId:DESC" | "id:ASC" | "id:DESC";
        /**
         * @description *Available fields*: **code**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.code=$eq:val1
         */
        filter?: "filter.code=$eq:val1" | "filter.code=$in:val1";
        /** @description Multicolumn search, columns searched: **code**, **name** */
        search?: string;
      };
      path: {
        regionId: number;
      };
    };
    responses: {
      /** @description Returns collections by region */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCollectionDto"];
        };
      };
    };
  };
  CollectionController_getAllItems: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?:
          | "position:ASC"
          | "position:DESC"
          | "entityId:ASC"
          | "entityId:DESC"
          | "entityType:ASC"
          | "entityType:DESC"
          | "id:ASC"
          | "id:DESC";
        /**
         * @description *Available fields*: **entityType**, **entityId**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.entityType=$eq:val1
         */
        filter?:
          | "filter.entityType=$eq:val1"
          | "filter.entityType=$in:val1"
          | "filter.entityId=$eq:val1"
          | "filter.entityId=$in:val1";
        /** @description Multicolumn search, columns searched: **entityType** */
        search?: string;
      };
      path: {
        regionId: number;
        collectionId: number;
      };
    };
    responses: {
      /** @description Returns collection items for a given collection */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCollectionItemsDto"];
        };
      };
    };
  };
  CollectionController_getCollection: {
    parameters: {
      path: {
        regionId: number;
        collectionId: number;
      };
    };
    responses: {
      /** @description Returns a single collection */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionOutDto"];
        };
      };
      /** @description Collection not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  CollectionController_getCollectionImages: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?:
          | "height:ASC"
          | "height:DESC"
          | "width:ASC"
          | "width:DESC"
          | "key:ASC"
          | "key:DESC"
          | "id:ASC"
          | "id:DESC";
        /**
         * @description *Available fields*: **key**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.key=$eq:val1
         */
        filter?: "filter.key=$eq:val1" | "filter.key=$in:val1";
      };
      path: {
        regionId: number;
        collectionId: number;
      };
    };
    responses: {
      /** @description Returns images for a single collection */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityImageDto"];
        };
      };
      /** @description Collection not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  CollectionController_getCollectionMetadata: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?:
          | "value:ASC"
          | "value:DESC"
          | "key:ASC"
          | "key:DESC"
          | "id:ASC"
          | "id:DESC";
        /**
         * @description *Available fields*: **key**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.key=$eq:val1
         */
        filter?: "filter.key=$eq:val1" | "filter.key=$in:val1";
      };
      path: {
        regionId: number;
        collectionId: number;
      };
    };
    responses: {
      /** @description Returns metadata for a single collection */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityMetadataDto"];
        };
      };
      /** @description Collection not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  ViewController_getAll: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?: "id:ASC" | "id:DESC";
        /**
         * @description *Available fields*: **id**, **code**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.id=$eq:val1
         */
        filter?:
          | "filter.id=$eq:val1"
          | "filter.id=$in:val1"
          | "filter.code=$eq:val1"
          | "filter.code=$in:val1";
        /** @description Multicolumn search, columns searched: **id**, **code** */
        search?: string;
      };
      path: {
        regionId: number;
      };
    };
    responses: {
      /** @description Returns all views by region */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedViewDto"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  ViewController_getOne: {
    parameters: {
      path: {
        regionId: number;
        viewId: number;
      };
    };
    responses: {
      /** @description Returns a single view */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedViewDto"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  ViewController_getViewItems: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?:
          | "position:ASC"
          | "position:DESC"
          | "entityType:ASC"
          | "entityType:DESC"
          | "id:ASC"
          | "id:DESC";
        /** @description Multicolumn search, columns searched: **component**, **entityType**, **entityId** */
        search?: string;
      };
      path: {
        regionId: number;
        viewId: number;
      };
    };
    responses: {
      /** @description Returns items for a single view */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedViewItemDto"];
        };
      };
      /** @description View items not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  TagTypesController_getAll: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?: "code:ASC" | "code:DESC" | "id:ASC" | "id:DESC";
        /**
         * @description *Available fields*: **code**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.code=$eq:val1
         */
        filter?: "filter.code=$eq:val1" | "filter.code=$in:val1";
      };
      path: {
        regionId: number;
      };
    };
    responses: {
      /** @description Returns all tag types */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTagTypesDto"];
        };
      };
      /** @description Region not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  TagController_getAll: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?: "code, name:ASC" | "code, name:DESC" | "id:ASC" | "id:DESC";
        /**
         * @description *Available fields*: **code**, **name**, **tagTypeId**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.code=$eq:val1
         */
        filter?:
          | "filter.code=$eq:val1"
          | "filter.code=$in:val1"
          | "filter.name=$eq:val1"
          | "filter.name=$in:val1"
          | "filter.tagTypeId=$eq:val1"
          | "filter.tagTypeId=$in:val1";
      };
      path: {
        regionId: number;
      };
    };
    responses: {
      /** @description Returns all tags */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTagDto"];
        };
      };
      /** @description Region not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  TagController_getOne: {
    parameters: {
      path: {
        regionId: number;
        tagId: number;
      };
    };
    responses: {
      /** @description Returns a single tag */
      200: {
        content: {
          "application/json": components["schemas"]["TagOutDto"];
        };
      };
      /** @description Region or tag not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  TagController_getAllImages: {
    parameters: {
      query?: {
        /**
         * @description Page number (starting from 1)
         * @example 1
         */
        page?: number;
        /**
         * @description Number of records per page
         * @example 10
         */
        limit?: number;
        /** @description Format: _field_:_direction_ [direction may be ASC or DESC] e.g. id:DESC */
        sortBy?:
          | "height:ASC"
          | "height:DESC"
          | "width:ASC"
          | "width:DESC"
          | "key:ASC"
          | "key:DESC"
          | "id:ASC"
          | "id:DESC";
        /**
         * @description *Available fields*: **id**, **key**, **width**, **height**;
         *  *Available operators*: **$eq**, **$in**
         * @example filter.id=$eq:val1
         */
        filter?:
          | "filter.id=$eq:val1"
          | "filter.id=$in:val1"
          | "filter.key=$eq:val1"
          | "filter.key=$in:val1"
          | "filter.width=$eq:val1"
          | "filter.width=$in:val1"
          | "filter.height=$eq:val1"
          | "filter.height=$in:val1";
      };
      path: {
        regionId: number;
        tagId: number;
      };
    };
    responses: {
      /** @description Returns all images for a tag */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityImageDto"];
        };
      };
      /** @description Region or tag not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  ForYouController_getView: {
    parameters: {
      path: {
        regionId: number;
      };
    };
    responses: {
      /** @description Returns the For You view. */
      200: {
        content: {
          "application/json": components["schemas"]["ViewDto"];
        };
      };
      /** @description View not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
  ForYouController_getViewItems: {
    parameters: {
      path: {
        regionId: number;
      };
    };
    responses: {
      /** @description Returns the For You view items. */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedViewItemDto"];
        };
      };
      /** @description The user is not authenticated. */
      401: {
        content: {
          "application/json": components["schemas"]["FailedResponse"];
        };
      };
      /** @description The user is not authorized to access this resource. */
      403: {
        content: {
          "application/json": components["schemas"]["FailedResponse"];
        };
      };
      /** @description View not found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFoundResponse"];
        };
      };
    };
  };
}
