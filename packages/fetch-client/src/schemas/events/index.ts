/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/healthcheck": {
    get: operations["HealthCheckController_check"];
  };
  "/api/saml2/login": {
    /** Make login request */
    get: operations["authLogin"];
  };
  "/api/saml2/logout": {
    /** Make logout request */
    get: operations["authLogout"];
  };
  "/api/v1/events": {
    /** Get all events */
    get: operations["getEvents"];
    /** Create event */
    post: operations["createEvent"];
  };
  "/api/v1/events/{id}": {
    /** Get event */
    get: operations["getEvent"];
    /** Delete event */
    delete: operations["deleteEvent"];
    /** Update event */
    patch: operations["updateEvent"];
  };
  "/api/v1/events/slug/{slug}": {
    /** Check if an event slug is available */
    get: operations["validateSlug"];
  };
  "/api/v1/videos/upload-token": {
    /**
     * Get a delegated video upload token
     * @description SimpleSaml auth required
     */
    get: operations["getDelegatedToken"];
  };
  "/api/v1/videos": {
    /** Create a new video */
    post: operations["createVideo"];
  };
  "/api/v1/videos/{id}": {
    /** Get a video */
    get: operations["getVideo"];
    /** Delete a video */
    delete: operations["deleteVideo"];
    /** Update a video */
    patch: operations["updateVideo"];
  };
  "/api/v1/videos/thumbnail/{id}": {
    /**
     * Upload video thumbnail
     * @description SimpleSaml auth required
     */
    post: operations["uploadVideoThumbnail"];
  };
  "/api/v1/livestreams": {
    /** Create livestream */
    post: operations["createLivestream"];
  };
  "/api/v1/livestreams/{id}": {
    /** Delete livestream */
    delete: operations["deleteLivestream"];
    /** Update livestream */
    patch: operations["updateLivestream"];
  };
  "/api/v1/livestreams/thumbnail/{id}": {
    /**
     * Upload livestream thumbnail
     * @description SimpleSaml auth required
     */
    post: operations["uploadLivestreamThumbnail"];
  };
  "/api/v1/images": {
    /** Upload image to cloudinary */
    post: operations["uploadImage"];
  };
  "/api/v1/user": {
    /** Get logged user details */
    get: operations["getUser"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EventsShuttlelinksDto: {
      id: number;
      eventId: number;
      regionId: number;
      appId: number | null;
      stationId: number;
      shuttlelinkId: number;
      shuttlelinkUrl: string;
    };
    Metadata: {
      key: string;
      value: string;
    };
    VideoSourceLiveStreamLink: {
      rel: string;
      uri: string;
    };
    VideoSourceLiveStream: {
      liveStreamId: string;
      links: components["schemas"]["VideoSourceLiveStreamLink"][];
    };
    VideoSource: {
      uri: string;
      type: string;
      liveStream: components["schemas"]["VideoSourceLiveStream"];
    };
    VideoAssets: {
      hls: string;
      iframe: string;
      player: string;
      thumbnail: string;
      mp4: string;
    };
    VideoDto: {
      duration: number | null;
      videoId: string;
      /** Format: date-time */
      createdAt: string;
      title: string;
      description: string;
      publishedAt: string;
      /** Format: date-time */
      updatedAt: string;
      tags: string[];
      metadata: components["schemas"]["Metadata"][];
      source: components["schemas"]["VideoSource"];
      assets: components["schemas"]["VideoAssets"];
      playerId: string;
      _public: boolean;
      panoramic: boolean;
      mp4Support: boolean;
    };
    LiveStreamAssetsDto: {
      hls?: string;
      iframe?: string;
      player?: string;
      thumbnail?: string;
    };
    LiveStreamsDto: {
      /** @description The unique, private stream key that you use to begin streaming. Will be blank if requester is not logged into Events Admin */
      streamKey?: string;
      id: number;
      eventId: number;
      /** @enum {string} */
      orientation: "landscape" | "portrait";
      liveStreamId: string;
      assets?: components["schemas"]["LiveStreamAssetsDto"];
      broadcasting?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name: string;
      record?: boolean;
      _public?: boolean;
      playerId?: string;
    };
    EventOutDto: {
      /** @enum {string|null} */
      eventType: "livestream" | "onDemand" | null;
      regionIds: number[];
      stationIds: number[];
      appIds: number[];
      id: number;
      title: string;
      /** Format: date-time */
      startAt: string | null;
      /** Format: date-time */
      endAt: string | null;
      /** Format: date-time */
      liveStartAt: string | null;
      /** Format: date-time */
      liveEndAt: string | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      imageHeroSmall: string | null;
      imageHeroLarge: string | null;
      description: string | null;
      highlightColour: string | null;
      isLoginRequired: boolean | null;
      isFeaturedEvent: boolean | null;
      slug: string | null;
      isPremiumOnly: boolean | null;
      /** @enum {string} */
      status: "publish" | "draft";
      isLivePopupEnabled: boolean | null;
      livePopupTitle: string | null;
      livePopupDescription: string | null;
      livePopupButtonText: string | null;
      livePopupButtonUrl: string | null;
      livePopupImageHero: string | null;
      eventsShuttlelinks: components["schemas"]["EventsShuttlelinksDto"][];
      videos?: components["schemas"]["VideoDto"][];
      eventsLivestreams: components["schemas"]["LiveStreamsDto"][];
    };
    DataResponsePagination: {
      /**
       * @description Total number of items
       * @default 0
       */
      totalItems: number;
      /**
       * @description Number of items in current request
       * @default 0
       */
      itemCount: number;
      /**
       * @description Number of items per page
       * @default 50
       */
      itemsPerPage: number;
      /**
       * @description The current page
       * @default 1
       */
      currentPage: number;
      /**
       * @description Total number of pages
       * @default 1
       */
      totalPages: number;
    };
    DataResponseLinks: {
      first: string;
      previous: string;
      next: string;
      last: string;
    };
    DataResponse: {
      items: readonly components["schemas"]["EventOutDto"][];
      meta: components["schemas"]["DataResponsePagination"];
      links: components["schemas"]["DataResponseLinks"];
    };
    EventCreateDto: {
      /** @enum {string|null} */
      eventType: "livestream" | "onDemand" | null;
      stationIds: number[];
      regionIds: number[];
      appIds: number[];
      title: string;
      /** Format: date-time */
      startAt: string | null;
      /** Format: date-time */
      endAt: string | null;
      /** Format: date-time */
      liveStartAt: string | null;
      /** Format: date-time */
      liveEndAt: string | null;
      imageHeroSmall: string | null;
      imageHeroLarge: string | null;
      description: string | null;
      highlightColour: string | null;
      isLoginRequired: boolean | null;
      isFeaturedEvent: boolean | null;
      slug: string | null;
      isPremiumOnly: boolean | null;
      isLivePopupEnabled: boolean | null;
      livePopupTitle: string | null;
      livePopupDescription: string | null;
      livePopupButtonText: string | null;
      livePopupButtonUrl: string | null;
      livePopupImageHero: string | null;
    };
    EventPatchDto: {
      /** @enum {string|null} */
      eventType?: "livestream" | "onDemand" | null;
      title?: string;
      /** Format: date-time */
      startAt?: string | null;
      /** Format: date-time */
      endAt?: string | null;
      /** Format: date-time */
      liveStartAt?: string | null;
      /** Format: date-time */
      liveEndAt?: string | null;
      imageHeroSmall?: string | null;
      imageHeroLarge?: string | null;
      description?: string | null;
      highlightColour?: string | null;
      isLoginRequired?: boolean | null;
      isFeaturedEvent?: boolean | null;
      slug?: string | null;
      isPremiumOnly?: boolean | null;
      isLivePopupEnabled?: boolean | null;
      livePopupTitle?: string | null;
      livePopupDescription?: string | null;
      livePopupButtonText?: string | null;
      livePopupButtonUrl?: string | null;
      livePopupImageHero?: string | null;
      stationIds?: number[];
      regionIds?: number[];
      appIds?: number[];
    };
    SlugOutDto: {
      status: boolean;
      message: string;
    };
    UploadTokenDto: {
      token?: string;
      ttl?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      expiresAt?: string;
    };
    CreateVideoDto: {
      title: string;
      description?: string;
      source?: string;
      _public?: boolean;
      panoramic?: boolean;
      mp4Support?: boolean;
      playerId?: string;
      tags?: string[];
      metadata?: components["schemas"]["Metadata"][];
      /** Format: date-time */
      publishedAt?: string;
    };
    UpdateVideoDto: {
      title?: string;
      description?: string;
      source?: string;
      _public?: boolean;
      panoramic?: boolean;
      mp4Support?: boolean;
      playerId?: string;
      tags?: string[];
      metadata?: components["schemas"]["Metadata"][];
    };
    FileUploadDto: {
      file: Record<string, never>;
    };
    LiveStreamCreateDto: {
      eventId: number;
      /** @enum {string} */
      orientation: "landscape" | "portrait";
      name: string;
      record?: boolean;
      _public?: boolean;
      playerId?: string;
    };
    LiveStreamPatchDto: {
      name?: string;
      record?: boolean;
      _public?: boolean;
      playerId?: string;
      eventId?: number;
      /** @enum {string} */
      orientation?: "landscape" | "portrait";
    };
    ImageUploadDto: {
      base64EncodedImage: string;
    };
    ImageDto: {
      url: string;
    };
    UserDto: {
      id?: number;
      email: string;
      firstName: string;
      lastName: string;
      roles: string[];
      permissions: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  HealthCheckController_check: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Make login request */
  authLogin: {
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Make logout request */
  authLogout: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Get all events */
  getEvents: {
    parameters: {
      query?: {
        /** @description Filter by event title */
        title?: string;
        /** @description Filter by region code (regionId performs better) */
        regionCode?: string[];
        /** @description Filter by station code (stationId performs better) */
        stationCode?: string[];
        /** @description Filter by app code (appId performs better) */
        appCode?: string[];
        /** @description Filter by region ID (Performs better than regionCode) */
        regionId?: number[];
        /** @description Filter by station ID (Performs better than stationCode) */
        stationId?: number[];
        /** @description Filter by app ID (Performs better than appCode) */
        appId?: number[];
        /**
         * @description Apply a sort to the events
         *
         * featured: [default] For public facing clients (featured first, etc.)
         *
         * broadcast: Default for Admin ui
         *
         * upcoming: Order by the next most recent event to start broadcasting
         */
        _o?: "featured" | "broadcast" | "upcoming";
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DataResponse"];
        };
      };
    };
  };
  /** Create event */
  createEvent: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EventOutDto"];
        };
      };
    };
  };
  /** Get event */
  getEvent: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventOutDto"];
        };
      };
    };
  };
  /** Delete event */
  deleteEvent: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The event has been successfully deleted. */
      200: {
        content: never;
      };
      204: {
        content: never;
      };
    };
  };
  /** Update event */
  updateEvent: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventPatchDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventOutDto"];
        };
      };
    };
  };
  /** Check if an event slug is available */
  validateSlug: {
    parameters: {
      query?: {
        /** @description Target event ID. It is still available to existing events that already use it */
        id?: number;
      };
      path: {
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SlugOutDto"];
        };
      };
    };
  };
  /**
   * Get a delegated video upload token
   * @description SimpleSaml auth required
   */
  getDelegatedToken: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UploadTokenDto"];
        };
      };
    };
  };
  /** Create a new video */
  createVideo: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVideoDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["VideoDto"];
        };
      };
    };
  };
  /** Get a video */
  getVideo: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VideoDto"];
        };
      };
    };
  };
  /** Delete a video */
  deleteVideo: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** Update a video */
  updateVideo: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVideoDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VideoDto"];
        };
      };
    };
  };
  /**
   * Upload video thumbnail
   * @description SimpleSaml auth required
   */
  uploadVideoThumbnail: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description Video Thumbnail */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FileUploadDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["VideoDto"];
        };
      };
    };
  };
  /** Create livestream */
  createLivestream: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LiveStreamCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LiveStreamsDto"];
        };
      };
    };
  };
  /** Delete livestream */
  deleteLivestream: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** Update livestream */
  updateLivestream: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LiveStreamPatchDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LiveStreamsDto"];
        };
      };
    };
  };
  /**
   * Upload livestream thumbnail
   * @description SimpleSaml auth required
   */
  uploadLivestreamThumbnail: {
    parameters: {
      path: {
        id: number;
      };
    };
    /** @description LiveStream Thumbnail */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FileUploadDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LiveStreamsDto"];
        };
      };
    };
  };
  /** Upload image to cloudinary */
  uploadImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageUploadDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ImageDto"];
        };
      };
    };
  };
  /** Get logged user details */
  getUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDto"];
        };
      };
    };
  };
}
