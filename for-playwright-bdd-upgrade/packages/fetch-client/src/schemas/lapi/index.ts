/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/aggregatorbrands": {
    /**
     * Get a list of all active aggregator brands
     * @description Retrieve list of aggregator brands
     */
    get: operations["getAggregatorBrands"];
  };
  "/applist": {
    /**
     * Get applications object
     * @description Return a list of all Applications
     */
    get: operations["getApps"];
  };
  "/arartist/{absoluteArtistId}": {
    /**
     * Get artist (Absolute only)
     * @deprecated
     * @description Retrieve Artist Record
     */
    get: operations["getAbsoluteArtistById"];
  };
  "/audibles": {
    /**
     * Get audibles. (AppCode OR RegionCode OR StationCode OR BrandCode is required)
     *
     * @description Retrieve list of audible content (podcasts, box set episodes,
     * listen again episodes)
     * <hr>
     * <strong style="color:red">*One of these parameters is required: `AppCode`, `BrandCode`, `StationCode`, `RegionCode`</strong>
     */
    get: operations["getAudibles"];
  };
  "/boxsetepisodes/{stationCode}": {
    /**
     * Get set episodes object
     * @description Retrieve set episodes (JSON) -- Not on phones
     */
    get: operations["getBoxsetEpisodesByStationCode"];
  };
  "/boxset/{udid}/{appPlatform}/{stationCode}/{streamQuality}/{streamConnection}/{userId}": {
    /**
     * Get BoxSet and its episodes
     * @description Deprecated? Prefer getShows
     */
    get: operations["getBoxset"];
  };
  "/brands": {
    /** Index of brand entities */
    get: operations["getBrands"];
  };
  "/brand/{brandCode}": {
    /** Get brand object */
    get: operations["getBrandByBrandCode"];
  };
  "/content/{stationCode}": {
    /** Get station details */
    get: operations["getArticleByStationCode"];
  };
  "/contentdadi/{dadiId}/{filter}": {
    /** Get station details for Dadi ID */
    get: operations["getArticleByDadiIdAndFilter"];
  };
  "/contentdadi/{dadiId}": {
    /** Get station details for Dadi ID */
    get: operations["getArticleByDadiId"];
  };
  "/content/{stationCode}/{filter}": {
    /** Get station details */
    get: operations["getArticleByStationCodeAndFilter"];
  };
  "/devices": {
    /**
     * DEPRECATED. Get device tokens object
     * @deprecated
     * @description DEPRECATED. Index of device tokens
     */
    get: operations["getDevicesTokens"];
  };
  "/device/{udid}/{applicationCode}/{token}": {
    /**
     * DEPRECATED. Get device token object
     * @deprecated
     * @description DEPRECATED. Stores information about pushable device - {token} is unique identifier
     */
    get: operations["getDeviceToken"];
  };
  "/epgshows/{showId}": {
    /**
     * Retrieve show information.
     *
     * The "showId" is more like "listen again show id", but this endpoint
     * will also return non-listen again content too
     *
     * Non-listen again: Static content, mostly likely refering to a
     * podcast channel without
     * an explicit link)
     */
    get: operations["getEpgShow"];
  };
  "/eventdata/{eventId}": {
    /**
     * Retrieve raw-ish event record
     * @description Retrieve raw-ish event record
     */
    get: operations["getEventById"];
  };
  "/eventsdadi/{dadiCode}/{date}/{time}/{limit}": {
    /**
     * Get playlist with a Dadi ID
     * @description Retrieve "events" but with a Dadi ID
     */
    get: operations["getEventsByDadiId"];
  };
  "/events/{stationCode}/{time}/{limit}": {
    /**
     * Get playlist
     * @description Retrieve up to {limit} events up until {time}
     */
    get: operations["getEventsByStationCode"];
  };
  "/event/{udid}/{appPlatform}/{stationCode}/{timeCode}/{userId}": {
    /**
     * Get event object
     * @description Retrieve parsed event record (Generally more useful than eventdata)
     */
    get: operations["getEvent"];
  };
  "/forgetTokens": {
    /**
     * DEPRECATED. Delete multiple tokens
     * @deprecated
     */
    delete: operations["forgetTokens"];
  };
  "/initdadi/{dadiCode}": {
    /**
     * "init" but with Dadi ID
     * @description "init" but with Dadi ID
     */
    get: operations["initWithDadiId"];
  };
  "/initweb/{stationCode}": {
    /**
     * Retrieve a station's (potentially random) HTML Panel
     * @description Retrieve a station's (potentially random) HTML Panel
     */
    get: operations["initWithStationCode"];
  };
  "/init/{udid}/{appPlatform}/{location}/{userId}/{advertiserId}/{deeplink}": {
    /**
     * Retrieve {station} configuration (Phones)
     * @description Retrieve {station} configuration (Phones)
     */
    get: operations["initApp"];
  };
  "/instream/{udid}/{appPlatform}/{stationCode}/{userId}/{duration}/{adType}/{metaData}/{bandwidth}": {
    /**
     * Get full screen streaming ad object
     * @description Returns xml document describing a full screen streaming ad
     */
    get: operations["getInstream"];
  };
  "/latestEvents": {
    /**
     * Get the latest 250 events for a Station
     * @description Retrieve "events" but with a Dadi ID
     */
    get: operations["latestEvents"];
  };
  "/listenagaindadi/{dadiCode}": {
    /** Get listen again episodes */
    get: operations["getListenAgainByDadiId"];
  };
  "/listenagain/{stationCode}": {
    /**
     * Get listenagain object
     * @description Retrieve historical play information for {station}
     */
    get: operations["getListenAgainByStationCode"];
  };
  "/listen/{udid}/{appPlatform}/{stationCode}/{streamQuality}/{streamConnection}/{userId}/{advertiserId}": {
    /** Logs a "listen" */
    get: operations["getListenLogs"];
  };
  "/login/{udid}/{appPlatform}/{location}/{email}/{password}/{device}": {
    /**
     * Get user information
     * @description Given valid credentials, will provide user information and hint at how long their cookie should last (not authentication!)
     */
    post: operations["login"];
  };
  "/logout/{udid}/{appPlatform}/{userId}": {
    /**
     * Logs logging user out
     * @description Logs logging user out (does not actually log user out, pretty much just logs it)
     */
    get: operations["logout"];
  };
  "/log": {
    /**
     * Register any log
     * @description Generic incoming logger so external applications can send any log they like
     */
    post: operations["log"];
  };
  "/luckydip/{regionCode}": {
    /** Returns 4 randomly ordered local stations */
    get: operations["luckydip"];
  };
  "/makeToken/{userId}/{deviceId}": {
    /**
     * Get JWT token
     * @description One-time request to obtain JWT token without user credentials (<a href="https://bauer-specialist.atlassian.net/wiki/spaces/AUD/pages/773947418">readme</a>)
     */
    get: operations["makeToken"];
  };
  "/localstations/{regionCode}": {
    /**
     * Get split stations near user
     * @description Returns nearby stations split based range of users location
     */
    get: operations["getLocalStations"];
  };
  "/nearbyStations/{stationCode}": {
    /**
     * Get nearby split stations
     * @description Returns nearby stations split based on user location
     */
    get: operations["getNearbyStations"];
  };
  "/networks": {
    /**
     * Get station networks
     * @description Return the station networks
     */
    get: operations["getNetworks"];
  };
  "/nowplaying/{stationCode}/{responseType}": {
    /**
     * Get nowplaying object
     * @description Return what is currently playing on {station}
     */
    get: operations["getNowPlayingByStationCode"];
  };
  "/oanowplaying/{stationCode}/{responseType}": {
    /**
     * Get nowplaying object with small time adjustment so it aligns to realtime
     * @description Return what is currently playing on {station}
     */
    get: operations["getOaNowPlayingByStationCode"];
  };
  "/playlist": {
    /** Get playlist information for a show or station. Must provide one of ScheduleId, StationCode */
    get: operations["getPlaylist"];
  };
  "/podcastchannelsdadi/{dadiCode}": {
    /** Return Podcast Channels that belong to {station} */
    get: operations["getPodcastChannelsDadiByDadiId"];
  };
  "/podcastchannelsregion/{regionCode}/featured": {
    /** Get list of all featured podcasts */
    get: operations["getFeaturedPodcastsByRegion"];
  };
  "/podcastchannelsregion/{regionCode}": {
    /** Get list of all podcasts by region. */
    get: operations["podcastsByRegionCode"];
  };
  "/podcastchannelsstation/{stationCode}": {
    /**
     * Get podcast channels station object
     * @description Return Podcast Channels that belong to {station}
     */
    get: operations["podcastchannelsstation"];
  };
  "/podcastsbychannel/{podcastchannel}": {
    /** Find all podcasts by channel */
    get: operations["getPodcastsByChannel"];
  };
  "/podcastsbyid/{podcastChannelId}": {
    /**
     * Get podcasts object
     * @description Return Podcasts that belong to {podcastChannel}
     */
    get: operations["getPodcastsByChannelId"];
  };
  "/podcastsbystation/{stationCode}": {
    /** Get podcasts by station code */
    get: operations["getPodcastsChannelsByStationCode"];
  };
  "/podcast/{podcastId}": {
    /**
     * Get podcast object
     * @description Same as `/podcastsbyid/{podcastId}` except the Podcast Channel is merged with Podcast
     */
    get: operations["getPodcastById"];
  };
  "/premiumStatusForUser": {
    /**
     * Return subscription status for a user
     * @description Returns premium subscription status for a user, via the Bearer auth header
     */
    get: operations["premiumStatusForUser"];
  };
  "/premium/station/{stationCode}": {
    /** Get Premium Incentive information for a Station */
    get: operations["getPremiumForStation"];
  };
  "/premium/app/{appCode}": {
    /** Get Premium Incentive information for an App */
    get: operations["getPremiumForApp"];
  };
  "/premium/region/{regionCode}": {
    /** Get Premium Incentive information for a Region */
    get: operations["getPremiumForRegion"];
  };
  "/presenters/{presenterId}": {
    /** Get presenter by ID */
    get: operations["getPresenterById"];
  };
  "/presenters": {
    /** Get presenters. (stationId OR stationCode OR brandCode parameter is required) */
    get: operations["getPresenters"];
  };
  "/regionsmeta/{regionCode}": {
    /** Specific endpoint to Google Home Feed */
    get: operations["getRegionsMetaByRegionCode"];
  };
  "/regions": {
    /**
     * Get regions object
     * @description List of regions
     */
    get: operations["getRegions"];
  };
  "/register/{udid}/{appPlatform}/{fullName}/{email}/{gender}/{location}/{age}/{password}": {
    /**
     * Creates a user account
     * @description Creates a user account
     */
    post: operations["registerUser"];
  };
  "/reminder/{udid}/{appPlatform}/{stationCode}/{timeCode}/{userId}": {
    /** Generates and sends email to {user} reminding them of {station}'s current show */
    get: operations["setUserReminder"];
  };
  "/reset/{udid}/{appPlatform}/{emaill}": {
    /**
     * Reset user's password
     * @description Reset {user.email}'s password and send a reset email
     */
    get: operations["resetUserPassword"];
  };
  "/scheduledadi/{dadiCode}/{timeStart}/{timeEnd}": {
    /**
     * "schedule" but with Dadi ID
     * @description "schedule" but with Dadi ID
     */
    get: operations["getScheduleDadiByDadiId"];
  };
  "/schedule/{stationCode}/{timeStart}/{timeEnd}": {
    /** Get schedule object */
    get: operations["getScheduleByStationCode"];
  };
  "/settings/{saveMode}/{udid}/{appPlatform}/{userId}": {
    /**
     * Retrieves/Saves user's settings
     * @description Retrieves or (or saves if {saveMode} is "save") user's settings
     */
    get: operations["getUserSettings"];
  };
  "/sharpstream": {
    /**
     * Rebuild {streamUrl} and redirect to it
     * @description Rebuild {streamUrl} and redirect to it
     */
    get: operations["setSharpstream"];
  };
  "/shows": {
    /** Get shows object. (AppCode OR BrandCode OR StationCode OR RegionCode parameter is required) */
    get: operations["getShows"];
  };
  "/shuttlelinks/{identifier}": {
    /** Get a Shuttle Link object */
    get: operations["getShuttlelinksById"];
    /** Create a Shuttle Link object for a specific entity. Device URLs will be auto-generated. */
    post: operations["setShuttlelinkByEntity"];
  };
  "/shuttlelinks": {
    /** Create a Shuttle Link object */
    post: operations["postShuttlelinks"];
  };
  "/signIn/station/{stationCode}": {
    /** Get SignIn Incentive information for a Station */
    get: operations["getSignInIncentivesForStation"];
  };
  "/signIn/app/{appCode}": {
    /** Get SignIn Incentive information for an App */
    get: operations["getSignInIncentivesForApp"];
  };
  "/stationlist/{regionCode}": {
    /**
     * Get list of all stations. Deprecated in favour of "getMinifiedStations"
     * @deprecated
     */
    get: operations["getStationsByRegionCode"];
  };
  "/stationlist": {
    /**
     * Get list of all stations. Deprecated in favour of "getMinifiedStations"
     * @deprecated
     */
    get: operations["getStations"];
  };
  "/stationsbyport": {
    /**
     * Get station code grouped by port
     * @description Get station code grouped by port
     */
    get: operations["getStationsByPort"];
  };
  "/stations_nowplaying/{regionCode}": {
    /** Get nowplaying / station on air data of stations */
    get: operations["getNowPlayingAndOnAirForStations"];
  };
  "/stations/{regionCode}": {
    /** Get list of all stations */
    get: operations["getMinifiedStations"];
  };
  "/streamAuthLevel": {
    /**
     * Authenticated streams lookup endpoint
     * @description Returns stream auth level based on a respective stream url
     */
    get: operations["streamAuthLevel"];
  };
  "/ticketsdadi/{dadiCode}": {
    /**
     * Get tickets with Dadi ID
     * @description Retrieves "tickets" but with Dadi ID
     */
    get: operations["getTicketsDadiByDadiId"];
  };
  "/tickets/{stationCode}": {
    /**
     * Get tickets object
     * @description Retrieves tickets available (via. <a href="http://aloud.com/">Aloud.com)</a>
     */
    get: operations["getTicketsByStationCode"];
  };
  "/tokens/{registrationToken}": {
    /**
     * DEPRECATED. Update a registration token.
     * @deprecated
     * @description DEPRECATED. Update a registration token.
     */
    post: operations["updateToken"];
    /**
     * Remove a registration token.
     * @description Remove a registration token.
     */
    delete: operations["deleteToken"];
  };
  "/traveldadi/{dadiCode}": {
    /**
     * Get travel with Dadi ID
     * @description "travel" but with a Dadi ID
     */
    get: operations["getTrafficWarningsByDadiId"];
  };
  "/travel/{stationCode}": {
    /**
     * Get traffic warning information
     * @description Returns traffic warnings nearby to {station}
     */
    get: operations["getTrafficWarningsByStationCode"];
  };
  "/utterances/{regionCode}": {
    /** @description List of utterances for this region, arranged by station, device type, and locale */
    get: operations["getVoiceUtterancesByRegionCode"];
  };
  "/verify/{udid}/{appPlatform}/{email}": {
    /**
     * Verifies user email
     * @deprecated
     * @description Verifies a user's email post-registration
     */
    get: operations["verifyUserEmail"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description Booly numbers deserve love too
     * @enum {number}
     */
    NumericBoolean: 0 | 1;
    /**
     * @description These aren't booly, but they want to be
     * @enum {string}
     */
    StringBoolean: "0" | "1";
    /**
     * Format: uri
     * @description A Url to an image, refer to property name for description
     * @example https://fakeimg.pl/300x300/282828/eae0d0/?retina=1&text=fallback
     */
    ImageUrl: string;
    /**
     * Format: uri
     * @description A Url that can be listened to
     * @example https://n02.on.revma.com/vtaxxb6knrhvv
     */
    StreamUrl: string;
    /**
     * Format: uri
     * @description A Url that intended to be to be used in for an API request (Not for end-users)
     */
    ApiUrl: string;
    /**
     * Format: uri
     * @description A Url to an web page which the user can follow, refer to property name for description
     */
    PageUrl: string | null;
    /**
     * Format: uri
     * @description The shuttle URL is used for sharing and is compatible with any device that opens it
     * @example https://listen.absoluteradio.co.uk/316288
     */
    ShuttleUrl: string;
    /**
     * Format: uri
     * @description A URL intended to be opened by a phone application
     * @example abrapp://foo/bar
     */
    AppUrl: string;
    StringResponse: string;
    /** @description These aren't booly, but they want to be */
    StationIds: number[];
    /**
     * @description A unique identifier that includes the type of content the ID refers to
     * @example podcast:1234
     */
    ShowOrAudibleId: string;
    /**
     * @description A premium package
     * @example 1
     */
    PremiumId: number;
    /**
     * @description Unique identifier for a station
     * @example 1
     */
    StationId: number;
    /**
     * @description Unique identifier for a station
     * @example abr
     */
    StationCode: string;
    /**
     * @description Single line title of the station
     * @example Absolute Radio
     */
    StationName: string;
    /**
     * @description Unique identifier for an App
     * @example 1
     */
    AppId: number;
    /**
     * @description Unique identifier for an App
     * @example abr
     */
    AppCode: string;
    /**
     * @description Used as a hint to determine whether user should be migrated to another application
     * @enum {string}
     */
    AppMigrationStatus: "true" | "false" | "skip";
    /**
     * @description Unique identifier for a Radio Brand
     * @example 1
     */
    BrandId: number;
    /**
     * @description Unique identifier for an a Radio Brand
     * @example UK_ABSOLUTE
     */
    BrandCode: string;
    /**
     * @description Unique identifier for a Network
     * @example 1
     */
    NetworkId: number;
    /**
     * @description The unique identifier to a podcast episode
     * @example 111223333
     */
    PodcastId: number;
    /**
     * @description The unique identifier to a podcast channel (A collection of podcast episodes)
     * @example 40948
     */
    PodcastChannelId: number;
    /**
     * @description Unique identifier for a Podcast Channel Show/Collection
     * @example my-podcast-channel
     */
    PodcastChannelSlug: string;
    PodcastChannelImageUrl: components["schemas"]["ImageUrl"] & string;
    PodcastChannelWideImageUrl: components["schemas"]["ImageUrl"] & string;
    PodcastChannelHeroImageUrl: components["schemas"]["ImageUrl"] & string;
    PodcastChannelHeroWideImageUrl: components["schemas"]["ImageUrl"] & string;
    StationMobileHeroImage: components["schemas"]["ImageUrl"] & string;
    StationWhiteLogoImage: components["schemas"]["ImageUrl"] & string;
    StationHeroImage: components["schemas"]["ImageUrl"] & string;
    StationListenBarLogo: components["schemas"]["ImageUrl"] & string;
    StationHeaderLogo: components["schemas"]["ImageUrl"] & string;
    StationHeaderLogoSVG: components["schemas"]["ImageUrl"] & string;
    StationLockScreenImage: components["schemas"]["ImageUrl"] & string;
    /**
     * @description Unique identifier for a Listen Again Show
     * @example 1123123
     */
    ShowId: number;
    /**
     * @description Single line title of the show
     * @example Danielle Perry
     */
    ShowTitle: string;
    /** @description Longer form description of the show */
    ShowDescription: number;
    /**
     * @description Unique identifier for a Listen Again Show
     * @example my-show
     */
    ShowSlug: string;
    /**
     * @description Unique identifier for an Event
     * @example 1123123123012379
     */
    EventId: number;
    /**
     * @description Unique identifier for a Listen Again Episode
     * @example 123123
     */
    ScheduleId: number;
    /**
     * @description ISO-3166-2 Region code
     * @example GB
     * @enum {string}
     */
    RegionCode:
      | "GB"
      | "NO"
      | "DK"
      | "FI"
      | "SE"
      | "DE"
      | "GR"
      | "CY"
      | "RO"
      | "MD"
      | "PL"
      | "IE";
    /** @enum {string} */
    AudibleTypes: "podcast_episode" | "listenagain" | "boxset_episode";
    /** @enum {string} */
    BroadcastMediaTypes:
      | "DAB"
      | "Virgin Media"
      | "Freeview"
      | "Freesat"
      | "Sky"
      | "AM";
    /**
     * @description Unique identifier for a region
     * @enum {integer}
     */
    RegionId: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
    /**
     * @description Unique identifier for the parent collection
     * @example 336
     */
    BoxSetId: number;
    /**
     * @description Unique identifier a box set collection
     * @example pride-not-prejudice
     */
    BoxSetSlug: string;
    NielsenVcid: string | null;
    /**
     * Format: date-time
     * @description Either UtcTime or Localised time, dependant on context
     */
    DateTime: string;
    /**
     * @description A colour, as a complete hex string
     * @example #5D2466
     */
    HexCodeColor: string;
    /**
     * @description A duration, in seconds
     * @example 666
     */
    DurationInSeconds: number;
    /**
     * @description The email address of a user (PII)
     * @example john.smith@bauermedia.co.uk
     */
    Email: string;
    /**
     * @description DFP ad path, may contain "%url%" which clients must replace with the URL
     * @example RDENMARK/%url%
     */
    DfpAdPath: string;
    EmbeddedPodcastEpisode: {
      podcast_episode?: components["schemas"]["PodcastEpisode"];
    };
    EmbeddedListenAgainEpisode: {
      listenagain?: components["schemas"]["ListenAgain"];
    };
    EmbeddedBoxSetEpisode: {
      boxset_episode?: components["schemas"]["BoxSetEpisode"];
    };
    EmbeddedPodcastShow: {
      podcast?: components["schemas"]["PodcastChannel"];
    };
    EmbeddedBoxSet: {
      boxset?: components["schemas"]["BoxSet"];
    };
    EmbeddedListenAgainShow: {
      listenagain_show?: components["schemas"]["ListenAgainShow"];
    };
    /** @description Payload response containing a list of aggregator brands */
    AggregatorBrandResponse: {
      data?: components["schemas"]["AggregatorBrand"][];
    };
    /** @description List of (phone) applications */
    AppListResponse: components["schemas"]["App"][];
    /**
     * Format: csv
     * @description An ordered list that hints at how content should be prioritised
     * @enum {string}
     */
    AggregatorBrandModuleContentPriority:
      | "hero"
      | "stations_featured"
      | "promotion"
      | "podcasts_featured"
      | "shows_random"
      | "stations_all";
    /** @description Aggregator Brands is a collection of stations and apps */
    AggregatorBrand: {
      /**
       * @description Unique identifier
       * @example 1
       */
      AggregatorBrandId: number;
      /**
       * @description Unique identifier
       * @example UK_PLANETRADIO
       */
      AggregatorBrandCode: string;
      /**
       * @description Human-friendly name
       * @example Planet Radio
       */
      AggregatorBrandName: string;
      /**
       * @description An enticing hook suited to the brand
       * @example The Best Music on Earth. 24/7.
       */
      AggregatorBrandStrapline: string;
      /**
       * @description Hex code colour string to be used as a baseline for the branding
       * @example null
       */
      AggregatorBrandColor: string;
      AggregatorBrandModuleContentPriority: components["schemas"]["AggregatorBrandModuleContentPriority"][];
      /** @default null */
      AggregatorBrandPodcastContentPriority: string;
      AggregatorBrandDisplayAggregatorMenu: components["schemas"]["NumericBoolean"] &
        Record<string, never>;
      AggregatorBrandInPagePlayerEnabled: components["schemas"]["NumericBoolean"] &
        Record<string, never>;
      /**
       * Format: uri
       * @example https://assets.planetradio.co.uk/img/AggregatorBrandWebLogoHeaderImageUrl/1.svg?ver=1572531086
       */
      AggregatorBrandWebLogoImageUrl: string;
      /**
       * Format: uri
       * @example https://assets.planetradio.co.uk/img/AggregatorBrandWebLogoHeaderImageUrl/1.svg?ver=1572531086
       */
      AggregatorBrandWebLogoHeaderImageUrl: string;
      AggregatorBrandSocialSharingImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandMobileHeroImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandDesktopHeroImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandWebsiteUrl: components["schemas"]["PageUrl"] & string;
      AggregatorBrandPrivacyUrl: components["schemas"]["PageUrl"] & string;
      AggregatorBrandTermsUrl: components["schemas"]["PageUrl"] & string;
      AggregatorBrandCompetitionTermsUrl: components["schemas"]["PageUrl"] &
        string;
      AggregatorBrandCookiesUrl: components["schemas"]["PageUrl"] & string;
      AggregatorBrandFacebookUrl: components["schemas"]["PageUrl"] & string;
      AggregatorBrandTwitterUrl: components["schemas"]["PageUrl"] & string;
      AggregatorBrandBannerDesktopImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandBannerMobileImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandBannerTargetUrl: components["schemas"]["PageUrl"] & string;
      /**
       * @description Hint at what should happen if a user clicks a link
       * @enum {string}
       */
      AggregatorBrandBannerClickAction: "self" | "blank";
      AggregatorBrandLogoImageUrl: components["schemas"]["ImageUrl"] & string;
      AggregatorBrandWhiteLogoImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandSplashLogoImageUrl: components["schemas"]["ImageUrl"] &
        string;
      AggregatorBrandPremiumSocialShareImageUrl: components["schemas"]["ImageUrl"] &
        string;
      RegionCode: components["schemas"]["RegionCode"];
      StationIds: components["schemas"]["StationIds"];
      AggregatorBrandAdvertiseUrl: components["schemas"]["ImageUrl"] & string;
      /** @description Whether this brand supports premium features */
      AggregatorBrandIsPremiumEnabled: boolean;
    };
    /** @description A phone application */
    App: {
      /**
       * @description Numeric unique identifier
       * @example 1
       */
      AppId: number;
      /**
       * @description Unique slug identifier
       * @example abr
       */
      AppCode: string;
      /**
       * @description Human friendly app name
       * @example Appsolute Radio
       */
      AppName: string;
      AppUpdated: Record<string, never> & components["schemas"]["DateTime"];
      AppDeleted: Record<string, never> & components["schemas"]["DateTime"];
      /**
       * @description Unique identifier for Apple ITunes
       * @example 308966633
       */
      AppITunesStoreId?: string;
      /** @example tv.umee.absoluteradio */
      AppGoogleBundleId?: string;
      /** @example tv.umee.absoluteradio */
      AppITunesBundleId: string;
      /** @example abr-appitunestestapp-1581498412.ipa */
      AppITunesTestApp: string;
      AppITunesTestAppVersion: string | null;
      /** @example com.android.abr - v9-2022.02.07.09.00.45.apk */
      AppGoogleTestApp: string;
      AppGoogleTestAppVersion: string | null;
      /** @example EVERYBODY IS A CRITIC */
      AppRateMeTitle: string;
      /** @example Please can you rate this app? We crave validation from you */
      AppRateMeMessage: string;
      /** @example Do it. Do it NOW. */
      AppRateMeYes: string;
      /** @description I shan't */
      AppRateMeNo: string;
      /** @description Maybe later */
      AppRateMeLater: string;
      /**
       * @description Message provided to user to prompt them to sign up
       * @example Login or register for a free Absolute Radio account and you'll get access to Absolute Radio on-demand
       */
      AppTrialExpiredMessage: string;
      AppNative: components["schemas"]["NumericBoolean"];
      /**
       * @description Domain used by Shuttle Service to build shuttle links
       * @example listen.absoluteradio.co.uk
       */
      AppUniversalLinkDomain: string;
      /** @example J83LE366S7 */
      AppITunesPrefix: string;
      /**
       * @description Loosely used for market segmentation
       * @example BMUK
       */
      AppPlayerId: string;
      AppGoogleSigningSHA: string;
      /** @example 2 */
      AppUniversalDomainKey: number;
      /** @example 1 */
      AppUniversalDomainCert: number;
      /** @example 3 */
      AppUniversalDomainChain: number;
      AppPushEnabled: components["schemas"]["NumericBoolean"];
      AppLoginType: components["schemas"]["LoginType"];
      /** @example /24156345/RAPP/RNAT_absolute/app-ios */
      AppDFPIOS: string;
      /** @example /24156345/RAPP/RNAT_absolute/app-android */
      AppDFPAndroid: string;
      AppRegionId: components["schemas"]["RegionId"];
      /** @example MTSCNK94TC */
      AppITunesPrefixEnt: string;
      /** @example com.bauermedia.abr */
      AppITunesBundleIdEnt: string;
      AppIconImageUrl: components["schemas"]["ImageUrl"] & string;
      AppIconSmallImageUrl: components["schemas"]["ImageUrl"] & string;
      /** @description Hints at the content sorting priorities for the app */
      AppShowPriorities: string[];
      /** @example bauerukios */
      AppIOSAdswizzInstallationId: string;
      /** @example bauerukandroid */
      AppAndroidAdswizzInstallationId: string;
      AppFirebaseProjectId: string;
    };
    /** @description A music artist or group */
    Artist: {
      /** @description Unique identifier */
      id: number;
      /** @description Human-friendly name of the artist */
      name: string;
      image: components["schemas"]["ImageUrl"];
      imageSmall: components["schemas"]["ImageUrl"];
    };
    /** @description Properties that an audible will always contain */
    AudibleBase: {
      /**
       * @description A unique identifier that includes the type of entity
       * @example podcast:123
       */
      id?: string;
      type?: components["schemas"]["AudibleTypes"];
      /** @description Human-friendly title of the audible */
      title?: string;
      /** @description The time the content was first made available (published) */
      published_at?: string;
      duration?: components["schemas"]["DurationInSeconds"] &
        Record<string, never>;
      /**
       * Format: uri
       * @description The website URL associated to the audible
       * @example https://planetradio.co.uk/podcasts/manford/listen/2073130/
       */
      url?: string;
      /**
       * Format: uri
       * @description The app URL associated to the audibles
       * @example abrapp://podcast/manford/10071194/play/
       */
      app_url?: string;
      shuttle_url?: components["schemas"]["ShuttleUrl"];
      /** @description Hints at whether the audible can be downloaded */
      is_downloadable?: boolean;
      /** @description Hints at whether the audible should only be available to users with premium access */
      is_premium_only?: boolean;
    };
    Audible: components["schemas"]["AudibleBase"] &
      components["schemas"]["EmbeddedPodcastEpisode"] &
      components["schemas"]["EmbeddedListenAgainEpisode"] &
      components["schemas"]["EmbeddedBoxSetEpisode"];
    /** @enum {string} */
    BoxSetEpisodeType: "full" | "trailer" | "bonus";
    /**
     * @description The title of the box set episode's parent show
     * @example Dave's party box set
     */
    BoxSetTitle: string;
    /** @description An audible episode that belong to a box set collection */
    BoxSetEpisode: {
      /**
       * @description Unique identifier
       * @example 317907
       */
      BoxSetEpisodeId: number;
      BoxSetId: components["schemas"]["BoxSetId"];
      /**
       * @description Human-readible name for the box set episode
       * @example Cinch presents Isle of Wight Festival 2022 - Blossoms
       */
      BoxSetEpisodeTitle: string;
      /**
       * @description A multi-line description
       * @example Catch up on all the best bits from cinch presents Isle of Wight Festival! We've been broadcasting all week long from the island and you can hear main stage and big top highlights plus exclusive interviews right here.
       *
       * Features Muse, Kasabian, Blossoms, Wet Leg and more!
       */
      BoxSetEpisodeDescription: string;
      BoxSetEpisodeImageUrl: components["schemas"]["ImageUrl"];
      BoxSetEpisodeImageThumbnailUrl: components["schemas"]["ImageUrl"];
      BoxSetEpisodeMediaUrl?: components["schemas"]["StreamUrl"];
      /**
       * @description The mime-type of BoxSetEpisodeMediaUrl
       * @example audio/m4a
       */
      BoxSetEpisodeMediaType: string;
      BoxSetEpisodeDuration: components["schemas"]["DurationInSeconds"];
      BoxSetEpisodePublishDate: Record<string, never> &
        components["schemas"]["DateTime"];
      /** @description Hints at the sort order in the context of other box set episodes */
      BoxSetEpisodeOrder: number;
      BoxSetEpisodeExpiryDate: Record<string, never> &
        components["schemas"]["DateTime"];
      BoxSetEpisodeSmartLink: components["schemas"]["ShuttleUrl"];
      BoxSetEpisodeWideImageUrl: components["schemas"]["ImageUrl"];
      BoxSetEpisodeStationCode: components["schemas"]["StationCode"] &
        Record<string, never>;
      StationTest: boolean;
      BoxSetSlug: components["schemas"]["BoxSetSlug"];
      BoxSetEpisodeIsPremiumOnly: boolean;
      /** @description Whether a box set episode is behind a paywall */
      BoxSetEpisodeIsBehindPaywall?: boolean;
      /** @description Whether a box set episode is behind a login */
      BoxSetEpisodeIsBehindLogin?: boolean;
      BoxSetEpisodeType: components["schemas"]["BoxSetEpisodeType"];
      BoxSetTitle: components["schemas"]["BoxSetTitle"];
      /** @description The stations that the _parent box set_ is associated with */
      StationCodes: components["schemas"]["StationCode"][];
    };
    /** @description A collection of box set episodes */
    BoxSet: {
      BoxSetId: components["schemas"]["BoxSetId"];
      StationId: components["schemas"]["StationId"];
      StationCode: components["schemas"]["StationCode"];
      BoxSetTitle: components["schemas"]["BoxSetTitle"];
      BoxSetUrl: components["schemas"]["PageUrl"];
      /**
       * @description Human-friendly multi-line description of the box set
       * @example At Absolute 80s, we interview some of the biggest stars of the 80s - listen back to those chats here, as well as album specials and more!
       *
       * :)
       */
      BoxSetDescription: string;
      BoxSetImageUrl: components["schemas"]["ImageUrl"];
      BoxSetImageThumbnailUrl: components["schemas"]["ImageUrl"];
      BoxSetSmartLink: components["schemas"]["ShuttleUrl"];
      BoxSetPublishDate: components["schemas"]["DateTime"];
      BoxSetRssBuildDate: components["schemas"]["DateTime"];
      BoxSetWideImageUrl: components["schemas"]["ImageUrl"];
      /** @description Whether the box set is intended only for adults */
      BoxSetAdultsOnly: boolean;
      /**
       * @description Human friendly summary of the box set
       * @example The best interviews and specials from Absolute 80s.",
       */
      BoxSetSubtitle: string;
      /** @description Whether a box set is behind a paywall */
      BoxSetIsBehindPaywall?: boolean;
      /** @description Whether the main station is a test station */
      StationTest: boolean;
      UpdatedAt?: components["schemas"]["DateTime"];
      /** @description Stations that box set loosely related to */
      StationIds: components["schemas"]["StationId"][];
      /** @description Stations that box set loosely related to */
      StationCodes: components["schemas"]["StationId"][];
    };
    Brand: {
      BrandId: components["schemas"]["BrandId"];
      BrandCode: components["schemas"]["BrandCode"];
      /**
       * @description Human-friendly name of the Brand
       * @example Absolute Radio
       */
      BrandName: string;
      RegionId: components["schemas"]["RegionId"];
      BrandWebsiteUrl: components["schemas"]["PageUrl"];
      BrandLogoImageUrl: components["schemas"]["ImageUrl"];
      /** @example UK_RADIO */
      BrandDomain?: string;
      /** @example You’ll hear fewer adverts and get bonus songs when you sign in. Enter your email address to sign in or create an Absolute Radio account. */
      BrandIncentiveText: string;
      BrandPrivacyUrl: components["schemas"]["PageUrl"];
      BrandTermsUrl: components["schemas"]["PageUrl"];
      BrandWhiteLogoImageUrl: components["schemas"]["ImageUrl"];
      BrandSplashLogoImageUrl: components["schemas"]["ImageUrl"];
      BrandColor: components["schemas"]["HexCodeColor"];
    };
    /** @description Article, sourced from "Publish API" */
    ContentArticle: {
      date?: components["schemas"]["DateTime"];
      station_code?: components["schemas"]["StationCode"];
      category?: string;
      title?: string;
      image?: components["schemas"]["ImageUrl"];
      url?: components["schemas"]["PageUrl"];
    };
    DeviceToken: {
      success?: number;
    };
    Device: string;
    EventsXml: {
      events?: components["schemas"]["CurrentAndFutureEvents"];
    };
    EpgShow: {
      showid?: components["schemas"]["ShowId"] & string;
      /**
       * @description Human-friendly title for the show
       * @example Hometime with Bush & Richie
       */
      title?: string;
      /** @example The Hometime show, brought to you by Andy Bush & Richie Firth. 3 hours of nonsense presented by 2 confused dads. Apologies in advance. */
      shortdesc?: string;
      image_url?: components["schemas"]["ImageUrl"] & string;
    };
    Event: {
      eventId: components["schemas"]["EventId"];
      eventStart: components["schemas"]["DateTime"];
      eventFinish: components["schemas"]["DateTime"];
      eventDuration: components["schemas"]["DurationInSeconds"];
      /**
       * @example Song
       * @enum {string}
       */
      eventType: "Song" | "0";
      /** @example American Girl */
      eventSongTitle: string;
      /** @example Tom Petty */
      eventSongArtist: string;
      eventImageUrl: components["schemas"]["ImageUrl"];
      eventImageUrlSmall: components["schemas"]["ImageUrl"];
      eventAppleMusicUrl: components["schemas"]["PageUrl"] &
        Record<string, never>;
    };
    Init: (components["schemas"]["EmbeddedStations"] &
      components["schemas"]["EmbeddedInitSettings"] &
      components["schemas"]["EmbeddedInitAdCall"] &
      components["schemas"]["EmbeddedInitBrand"] &
      components["schemas"]["EmbeddedInitMigration"])[];
    EmbeddedStations: {
      stations?: components["schemas"]["Station"][];
    };
    EmbeddedInitSettings: {
      settings?: components["schemas"]["InitSettings"];
    };
    InitSettings: {
      hqOptions?: string;
      shouldNag?: string;
      /**
       * @description Query parameters which need to be appended to the stream
       * @example &listenerid=0&lat=0.00&lon=0.00&carrier=unknown&awparams=loggedin:false;preroll:1;carrier:unknown;&aw_0_req.gdpr=true&amsparams=playerid:BMUK_iPhone;skey:1566556087;
       */
      streamParams?: string;
      skipLogin?: string;
      /**
       * @description Integration with Apple App Store
       * @example 12345678974
       */
      appITunesStoreId?: number;
      /**
       * @description Integration with Google
       * @example com.android.foo
       */
      appGoogleBundleId?: string;
      /**
       * @description Infers user workflow of app
       * @enum {string}
       */
      appType?: "radio" | "aggregator";
      /**
       * @description ISO 639-1 language code
       * @example en
       */
      appLanguage?: string;
      appPushNotifications?: string;
      /**
       * @description Message used to incentivise user to register/sign up
       * @example You'll hear 50% fewer ads when you sign in. Enter your email address.
       */
      appIncentiveText?: string;
      /** @example Everybody is a critic */
      appRateMeTitle?: string;
      /** @example If you enjoy using this app, we'd appreciate it if you took a moment to rate us in the app store. */
      appRateMeMessage?: string;
      /** @example Rate now */
      appRateMeYes?: string;
      /** @example No, thanks */
      appRateMeNo?: string;
      /** @example Ask me later */
      appRateMeLater?: string;
      appLoginType?: components["schemas"]["LoginType"];
      /** @example 800 */
      audioPreviewLength?: number;
      /** @example Login or register for a free at Example Radio account and you'll get access to Example Radio on-demand and exclusive competitions. */
      audioPreviewExpiryText?: string;
      /** @description Integration ID for Facebook */
      facebookAppID?: string;
      /** @description Integration ID for Firebase */
      firebaseAppID?: string;
      /** @description Integration ID for Google Analytics */
      googleAnalyticsAppID?: string;
      /** @example bauerukios */
      adswizzinstallid?: string;
      gdpr?: string;
      autoPlay?: string;
      signInIncentive?: components["schemas"]["SignInIncentive"];
    };
    EmbeddedInitAdCall: {
      adcall?: components["schemas"]["InitAdCall"];
    };
    InitAdCall: {
      IphoneInterstitialAdId?: number;
      IphoneBannerAdId?: number;
      AndroidInterstitialAdId?: number;
      AndroidBannerAdId?: number;
      IpadInterstitialAdId?: number;
      IpadMpuAdId?: number;
      IpadBannerAdId?: number;
      IphoneTransitionalAdId?: number;
      AndroidTransitionalAdId?: number;
      IpadTransitionalAdId?: number;
      DFPIOSId?: string;
      DFPAndroidId?: string;
    };
    EmbeddedInitBrand: {
      brand?: components["schemas"]["InitBrand"];
    };
    InitBrand: {
      /**
       * @description Type of brand, synonymous with AppType
       * @enum {string}
       */
      type?: "aggregator" | "brand";
      id?: components["schemas"]["BrandId"];
      code?: components["schemas"]["BrandCode"];
      /** @example Absolute Brand */
      name?: string;
      deleted?: components["schemas"]["DateTime"];
      websiteUrl?: components["schemas"]["PageUrl"] & string;
      color?: components["schemas"]["HexCodeColor"] & Record<string, never>;
      privacyUrl?: components["schemas"]["PageUrl"] & string;
      termsUrl?: components["schemas"]["PageUrl"] & string;
      whiteLogoImageUrl?: components["schemas"]["ImageUrl"] & string;
      splashLogoImageUrl?: components["schemas"]["ImageUrl"] & string;
    };
    EmbeddedInitMigration: {
      migration?: components["schemas"]["EmbeddedInitMigration"];
    };
    InitMigration: {
      car?: components["schemas"]["CarMigration"];
      app?: components["schemas"]["AppMigration"];
    };
    AppMigration: {
      status?: components["schemas"]["AppMigrationStatus"];
      /** @example We've moved! */
      title?: string;
      /** @example To continue listening to great music, you will need to get the [Distination App] app from the Store */
      description?: string;
      target?: components["schemas"]["AppMigrationTarget"];
    };
    AppMigrationTarget: {
      icon?: components["schemas"]["ImageUrl"] & Record<string, never>;
      /**
       * @description The name of the target application
       * @example Absolute Radio
       */
      name?: string;
      /** @description The name of the publisher */
      publisher?: string;
      apple?: components["schemas"]["AppMigrationButton"];
      google?: components["schemas"]["AppMigrationButton"];
    };
    AppMigrationButton: {
      /**
       * @description Button text
       * @example Download on App Store
       */
      button?: string;
      url?: components["schemas"]["AppUrl"];
    };
    CarMigration: {
      status?: components["schemas"]["AppMigrationStatus"];
      /** @example We're moving! */
      title?: string;
      /** @example To continue listening to great music, you will need to get the [Distination App] app from the Store */
      description?: string;
    };
    Instream: {
      fullscreen?: string;
      fullscreenhtml?: string;
    };
    ListenAgainEpisode: {
      episodeid: number;
      showid: number;
      starttime: string;
      title: string;
      shortdesc: string;
      smartlink: string;
      duration: components["schemas"]["DurationInSeconds"] &
        Record<string, never>;
      /** Format: uri */
      mediaurl: string;
      /** Format: uri */
      mediaurl_mp3: string;
      /** Format: uri */
      playerurl: string;
      /** Format: uri */
      imageurl_square: string;
      /** Format: uri */
      imageurl: string;
      playlist: string;
    };
    ListenAgainShowPresenter: {
      ShowPresenterId?: number;
      /** @example presenter-slug */
      ShowPresenterSlug?: string;
      /** Format: uri */
      ShowPresenterImageUrl?: string;
      ShowPresenterForename?: string;
      ShowPresenterSurname?: string;
    };
    ListenAgainShow: {
      ShowId: components["schemas"]["ShowId"];
      ShowSlug?: components["schemas"]["ShowSlug"];
      ShowActualId?: components["schemas"]["ShowId"] & Record<string, never>;
      ShowTitle: components["schemas"]["ShowTitle"];
      ShowDescription?: components["schemas"]["ShowDescription"];
      ShowImageUrl?: components["schemas"]["ImageUrl"];
      ShowWideImageUrl?: components["schemas"]["ImageUrl"];
      ShowMediumImageUrl?: components["schemas"]["ImageUrl"];
      ShowLargeImageUrl?: components["schemas"]["ImageUrl"];
      /** Format: email */
      ShowEmail?: string;
      /** Format: uri */
      ShowUrl?: string;
      ShowPodcastChannel?: components["schemas"]["PodcastChannelSlug"];
      ShowPodcastChannelUrl?: components["schemas"]["PageUrl"];
      ShowPodcastChannelImage?: components["schemas"]["ImageUrl"];
      ShowPresenters?: components["schemas"]["ListenAgainShowPresenter"];
      ShowExpiresAt?: components["schemas"]["DateTime"];
      StationCode?: components["schemas"]["StationCode"];
    };
    /** @description A single episode from a radio show */
    ListenAgain: {
      ScheduleId?: components["schemas"]["ScheduleId"];
      ShowId: components["schemas"]["ShowId"];
      ShowSlug: components["schemas"]["ShowSlug"];
      ScheduleStart?: components["schemas"]["DateTime"] & Record<string, never>;
      /**
       * @description A short summary description the listen again episode
       * @example Can you guess the mystery year?
       */
      ScheduleDescription?: string;
      /** @description The title of the listen again episode */
      ScheduleTitle?: string;
      ScheduleWebsite?: components["schemas"]["PageUrl"];
      ScheduleListenAgainROMP?: number;
      ScheduleSmartLink?: components["schemas"]["ShuttleUrl"];
      ScheduleDuration?: components["schemas"]["DurationInSeconds"] &
        Record<string, never>;
      SchedulePlaylist?: string;
      ScheduleImageUrl?: components["schemas"]["ImageUrl"];
      ScheduleWideImageUrl?: components["schemas"]["ImageUrl"];
      ScheduleLargeImageUrl?: components["schemas"]["ImageUrl"];
      ConfigListenAgainUrl?: components["schemas"]["PageUrl"];
      /** Format: uri */
      ConfigRadioplayerUrl?: string;
      /** Format: uri */
      mediaUrl?: string;
      ScheduleStationCode?: components["schemas"]["StationCode"];
      ScheduleExpiresAt?: components["schemas"]["DateTime"] &
        Record<string, never>;
    };
    ListenXml: {
      success?: number;
    };
    Network: {
      StationNetworkId?: number;
      StationNetworkName?: string;
    };
    NowPlayingReduced: {
      /** @example Do You Really Want To Hurt Me */
      track?: string;
      /** @example Culture Club */
      artist?: string;
      /**
       * @description time in milliseconds since the epoch
       * @example 1604506202000
       */
      time?: string;
    };
    NowPlayingSimple: {
      nowPlayingTrackId: number;
      nowPlayingTrack: string;
      nowPlayingArtist: string;
      nowPlayingImage: string;
      nowPlayingSmallImage: string;
      nowPlayingTime: string;
      nowPlayingDuration: number; // Ensure this matches the actual definition
      nowPlayingAppleMusicUrl: string | null;
    };
    /** @description Mutated event, refers only to actively playing content. Raw in-comparison to "NowPlayingSimplified" */
    NowPlaying: {
      EventId?: number;
      EventStart?: string;
      EventService?: number;
      EventFinish?: string;
      EventType?: string;
      EventMaestroContent?: string;
      EventTrackId?: number;
      EventNewTrackId?: number;
      TrackId?: number;
      TrackTitle?: string;
      TrackDuration?: components["schemas"]["DurationInSeconds"] &
        Record<string, never>;
      TrackImageAvailable?: number;
      TrackImageUpdatedDate?: string;
      TrackAppleMusicCollectionId?: number;
      TrackAppleMusicTrackId?: number;
      ArtistName?: string;
      ArtistId?: number;
      ArtistImageAvailable?: number;
      ArtistImageUpdatedDate?: string;
      /** Format: uri */
      TrackAppleMusicUrl?: string;
      /** Format: uri */
      ImageUrl?: string;
      /** Format: uri */
      ImageUrlSmall?: string;
      /** Format: uri */
      ArtistImageUrl?: string;
    };
    PodcastChannelRegion: {
      PodcastChannelId: components["schemas"]["PodcastChannelId"];
      StationId: components["schemas"]["StationId"];
      PodcastChannelRegion: components["schemas"]["RegionCode"];
      /** @example The Dave Berry Breakfast Show */
      PodcastChannelTitle: string;
      PodcastChannelImageUrl: components["schemas"]["PodcastChannelImageUrl"];
      PodcastChannelWideImageUrl: components["schemas"]["PodcastChannelWideImageUrl"];
      /** @example Big gigs, great guests and loads more - The Dave Berry Breakfast Show on Absolute Radio, weekdays from 6am. */
      PodcastChannelDescription: string;
      PodcastChannelGenre: number;
      PodcastChannelSubgenre: number;
      PodcastChannelExplicit: number;
      PodcastChannelSubtitle: string;
      PodcastChannelKeywords: string;
      PodcastChannelDeleted: string;
      PodcastChannelHeroImageUrl: components["schemas"]["PodcastChannelHeroImageUrl"];
      PodcastChannelRadioplayId: number;
      /** Format: uri */
      PodcastChannelExtRSSUrl: string;
      /** @example podcast-channel-slug */
      PodcastChannelSlug: string;
      PodcastChannelHeroWideImageUrl: components["schemas"]["PodcastChannelHeroWideImageUrl"];
      /** Format: uri */
      PodcastChannelItunesUrl: string;
      PodcastChannelFeatured: components["schemas"]["NumericBoolean"];
      /** @enum {string} */
      PodcastChannelEpisodeType: "episodic" | "serial";
      /** Format: uri */
      PodcastChannelAdswizzAdServerUrl: string;
      PodcastChannelWebAdZoneId: string;
      StationNielsenVcid: components["schemas"]["NielsenVcid"];
      PodcastChannelTags: string;
      /** Format: uri */
      PodcastChannelStitcherUrl: string;
      /** Format: uri */
      PodcastChannelOvercastUrl: string;
      /** Format: uri */
      PodcastChannelApplePodcastUrl: string;
      /** Format: uri */
      PodcastChannelGooglePodcastUrl: string;
      PodcastChannelLatestEpisode: components["schemas"]["PodcastEpisode"];
      StationIds: number[];
    };
    PodcastChannel: {
      PodcastChannelStitcherUrl: components["schemas"]["PageUrl"] & string;
      PodcastChannelFeatured: components["schemas"]["NumericBoolean"] &
        Record<string, never>;
      /** @description List of (Apple?) genre tags */
      PodcastChannelKeywords: string[];
      /**
       * @description Mostly affects the episode sorting algorithm
       * @enum {string}
       */
      PodcastChannelEpisodeType?: "serial" | "episodic";
      PodcastChannelGenre: number;
      /**
       * @description Unique identifier for the Radioplay service (Note: Not radioplayer, that is different)
       * @example 1000586
       */
      PodcastChannelRadioplayId: number;
      PodcastChannelItunesUrl: components["schemas"]["PageUrl"];
      PodcastChannelHeroImageUrl: components["schemas"]["ImageUrl"] & string;
      /**
       * @description List of genres, unknown origin
       * @example [
       *   "Comedy",
       *   "Music"
       * ]
       */
      PodcastChannelTags: string[];
      PodcastChannelImageUrl: components["schemas"]["ImageUrl"];
      PodcastChannelWebAdZoneId: string;
      PodcastChannelId: components["schemas"]["PodcastChannelId"];
      PodcastChannelDeleted: components["schemas"]["DateTime"];
      PodcastChannelApplePodcastUrl: components["schemas"]["PageUrl"];
      /** Format: uri */
      PodcastChannelAdswizzAdServerUrl: string;
      PodcastChannelTitle: string;
      PodcastChannelGooglePodcastUrl: components["schemas"]["PageUrl"];
      StationId: components["schemas"]["StationId"];
      StationCode?: components["schemas"]["StationCode"];
      PodcastChannelWideImageUrl: components["schemas"]["ImageUrl"] & string;
      /** Format: uri */
      PodcastChannelOvercastUrl: string;
      PodcastChannelExplicit: components["schemas"]["NumericBoolean"];
      StationNielsenVcid?: components["schemas"]["NielsenVcid"];
      PodcastChannelExtRSSUrl?: components["schemas"]["ApiUrl"];
      /** @example 0 */
      PodcastChannelSubgenre: number;
      /** @example Matt Forde and Matt Dyson bring you all the action from Saturday afternoon's football. If by action you mean mucking about, making fun of footballers and generally not knowing what's going on, then this is the show for you. */
      PodcastChannelDescription: string;
      PodcastChannelSubtitle: string;
      PodcastChannelHeroWideImageUrl: components["schemas"]["PodcastChannelHeroWideImageUrl"];
      PodcastChannelRegion: components["schemas"]["RegionCode"];
      PodcastChannelSlug: components["schemas"]["PodcastChannelSlug"];
      StationIds: components["schemas"]["StationId"][];
      StationCodes: components["schemas"]["StationCode"][];
      /** Format: uri */
      PodcastChannelPodplayUrl: string;
    };
    PodcastEpisode: {
      PodcastId: components["schemas"]["PodcastId"];
      PodcastChannelId: components["schemas"]["PodcastChannelId"];
      PodcastTitle: string;
      PodcastDescription: string;
      PodcastKeywords: string;
      PodcastCreationDate: components["schemas"]["DateTime"];
      PodcastUpdatedAt?: components["schemas"]["DateTime"];
      PodcastDeletedAt?: components["schemas"]["DateTime"];
      PodcastSubtitle: string;
      PodcastImageUrl: components["schemas"]["ImageUrl"];
      PodcastWideImageUrl: components["schemas"]["ImageUrl"];
      PodcastPublishDate: components["schemas"]["DateTime"];
      PodcastExplicit: components["schemas"]["NumericBoolean"];
      PodcastDuration: components["schemas"]["DurationInSeconds"] &
        Record<string, never>;
      /** Format: uri */
      PodcastExtMediaUrl: string;
      PodcastFacebookOgImageUrl: components["schemas"]["ImageUrl"];
      PodcastExpiry: components["schemas"]["DateTime"];
      PodcastMimeType: string;
      PodcastRadioplayId: number;
      PodcastSmartLink: components["schemas"]["ShuttleUrl"];
      PodcastEpisodeNumber: number;
      PodcastSeasonNumber: number;
      StationNielsenVcid: components["schemas"]["NielsenVcid"];
      PodcastStationCode: components["schemas"]["StationCode"];
      PodcastChannelTitle: string;
      /**
       * @description The unique identifier of the episode's channel
       * @example pop-fm-moder
       */
      PodcastChannelSlug: string;
    };
    PodcastChannelEpisodes: {
      channel: components["schemas"]["PodcastChannel"];
      episodes: components["schemas"]["PodcastEpisode"][];
      [key: string]: unknown;
    };
    /** @description Premium page content markers */
    Premium: {
      PremiumId?: components["schemas"]["PremiumId"];
      /** @description Header text for premium section */
      PremiumHeader?: string;
      /** @description Generic header text */
      PremiumHeaderGeneric?: string;
      /** @description Stations' header text */
      PremiumHeaderStations?: string;
      /** @description Shows' header text */
      PremiumHeaderShows?: string;
      /** @description Skips' header text */
      PremiumHeaderSkip?: string;
      /** @description Download header text */
      PremiumHeaderDownload?: string;
      PremiumBenefit1?: string;
      PremiumBenefit2?: string;
      PremiumBenefit3?: string;
      PremiumBenefit4?: string;
      PremiumBenefit5?: string;
      /** @description Trial button text */
      PremiumButtonTrial?: string;
      /** @description Activation button text */
      PremiumButtonActivate?: string;
      /** @description Dismiss button text */
      PremiumButtonDismiss?: string;
      /** @description Banner section button text */
      PremiumBannerButton?: string;
      /** @description Banner section description */
      PremiumBannerDescription?: string;
      /** @description Button support text */
      PremiumFooter?: string;
      /** @description Premiums price, formatted */
      PremiumPrice?: string;
      /**
       * @description Header text for the ad free section
       * @example No more banners
       */
      AdFreeHeader?: string;
      /**
       * @description Description for the ad free section
       * @example Because you're worth it
       */
      AdFreeDescription?: string;
      /**
       * @description Image for the ad free section
       * @example https://example.com/foo.jpg
       */
      AdFreeImageUrl?: string;
      /**
       * @description Header for the skip section
       * @example Skip things
       */
      SkipHeader?: string;
      /**
       * @description Description for the skip section
       * @example Do you like skips?
       */
      SkipDescription?: string;
      /**
       * @description Image URL for the skip image
       * @example https://example.com/foo.jpg
       */
      SkipImageUrl?: string;
      /**
       * @description Title for the stations section
       * @example Premium stations
       */
      StationsTitle?: string;
      /**
       * @description Title for the shows section
       * @example Premium shows
       */
      ShowsTitle?: string;
      PremiumConversionHeroImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title for Premium Conversion
       * @example Get Premium!
       */
      PremiumConversionTitle?: string;
      PremiumConversionBenefit1ImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title of first benefit of Premium
       * @example Ad-free Radio
       */
      PremiumConversionBenefit1Title?: string;
      /**
       * @description Description of first benefit of Premium
       * @example Listen to live radio uninterrupted
       */
      PremiumConversionBenefit1Description?: string;
      PremiumConversionBenefit2ImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title of second benefit of Premium
       * @example Skip Songs
       */
      PremiumConversionBenefit2Title?: string;
      /**
       * @description Description of second benefit of Premium
       * @example Skip up to 6 per hour
       */
      PremiumConversionBenefit2Description?: string;
      PremiumConversionBenefit3ImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title of third benefit of Premium
       * @example Exclusive songs
       */
      PremiumConversionBenefit3Title?: string;
      /**
       * @description Description of third benefit of Premium
       * @example Access to high quality content
       */
      PremiumConversionBenefit3Description?: string;
      PremiumConversionBenefit4ImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title of fourth benefit of Premium
       * @example Exclusive stations
       */
      PremiumConversionBenefit4Title?: string;
      /**
       * @description Description of fourth benefit of Premium
       * @example Access to unique stations
       */
      PremiumConversionBenefit4Description?: string;
      PremiumConversionBenefit5ImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title of fifth benefit of Premium
       * @example Access to premium on other devices
       */
      PremiumConversionBenefit5Title?: string;
      /**
       * @description Description of fifth benefit of Premium
       * @example Get premium anywhere
       */
      PremiumConversionBenefit5Description?: string;
      PremiumConversionBenefit6ImageUrl?: components["schemas"]["ImageUrl"] &
        string;
      /**
       * @description Title of sixth benefit of Premium
       * @example And another thing
       */
      PremiumConversionBenefit6Title?: string;
      /**
       * @description Description of sixth benefit of Premium
       * @example This is a sixth benefit
       */
      PremiumConversionBenefit6Description?: string;
      /**
       * @description Text if user has used their trial period
       * @example You are not eligible
       */
      PremiumMultiOfferTrialUsedText?: string;
      /**
       * @description Text if use has not used their trial period
       * @example You are eligible for a free trial
       */
      PremiumMultiOfferTrialNotUsedText?: string;
      /**
       * @description Title to confirm subscription
       * @example Subscription Successful
       */
      PremiumConfirmationTitle?: string;
      /**
       * @description Description confirming subscription
       * @example You have successfully subscribed
       */
      PremiumConfirmationDescription?: string;
      /**
       * @description Button text for premium confirmation
       * @example Confirm
       */
      PremiumConfirmationButtonText?: string;
      /**
       * @description Button text for premium trial
       * @example Trial
       */
      PremiumConversionButtonTrialText?: string;
      /**
       * @description Button text for premium activation
       * @example Activate
       */
      PremiumConversionButtonActivationText?: string;
      /**
       * @description Button text for dismiss
       * @example Dismiss
       */
      PremiumConversionButtonDismissText?: string;
      /**
       * @description Button text for premium support
       * @example Support
       */
      PremiumConversionButtonSupportText?: string;
    };
    Presenter: {
      id: number;
      presenterId: number;
      effective: string;
      forename: string;
      surname: string;
      tagline: string;
      summary: string;
      biography: string;
      username: string;
      record: string;
      reverted: string;
      /** Format: email */
      email: string;
      twitter: string;
      slug: string;
      metaTitle: string;
      metaDescription: string;
      status: string;
      region: components["schemas"]["RegionCode"];
      imageSquare: components["schemas"]["ImageUrl"];
      imagePortrait: components["schemas"]["ImageUrl"];
      imageWide: components["schemas"]["ImageUrl"];
      imageAlt: string;
      imageCaption: string;
      imageCredit: string;
      latestId: number;
      firstEffective: string;
      deleted: components["schemas"]["DateTime"];
      presenterStationId: components["schemas"]["StationId"];
      starred: number;
      stationId: components["schemas"]["StationId"][];
      shows: components["schemas"]["PresenterShow"][];
    };
    PresenterShow: {
      showId: components["schemas"]["ShowId"];
      title: string;
      imageSquare: components["schemas"]["ImageUrl"];
      slug: components["schemas"]["ShowSlug"];
    };
    RegionFeed: {
      "@content"?: string;
      "@type"?: string;
      "@id"?: string;
      /** Format: uri */
      url?: string;
      name?: string;
      broadcastDisplayName?: string;
      callSign?: string;
      description?: string;
      areaServed?: components["schemas"]["BroadcastArea"];
      potentialAction?: components["schemas"]["PotentialAction"];
      slogan?: string;
      broadcaster?: components["schemas"]["Broadcaster"][];
      logo?: components["schemas"]["RegionFeedLogo"];
      sameAs?: string;
      broadcastFrequency?: components["schemas"]["BroadcastFrequency"][];
    };
    RegionsMeta: {
      "@context": string;
      "@type": string;
      dateModified: components["schemas"]["DateTime"];
      dataFeedElement: components["schemas"]["RegionFeed"][];
    };
    Region: {
      StationRegionId?: components["schemas"]["RegionId"];
      StationRegionCode?: components["schemas"]["RegionCode"];
      StationRegionName?: string;
      StationRegionTimezone?: string;
      StationRegionLanguage?: string;
      StationRegionDefaultAppId?: components["schemas"]["AppId"];
    };
    Schedule: {
      episodeid?: components["schemas"]["ScheduleId"];
      showid?: components["schemas"]["ShowId"];
      start?: string;
      title?: string;
      shortdesc?: string;
      duration?: components["schemas"]["DurationInSeconds"] &
        Record<string, never>;
      image_url?: components["schemas"]["ImageUrl"];
      url?: components["schemas"]["ImageUrl"];
      record?: number;
      /** @description Hint at whether the client is capable of skipping this episode */
      is_skippable?: boolean;
    };
    SearchAppBrandStationCodes: {
      AppCodes?: components["schemas"]["AppCode"][];
      StationCodes?: components["schemas"]["StationCode"][];
      BrandCodes?: components["schemas"]["BrandCode"][];
    };
    SearchBoxSetEpisodeExtra: {
      UpdatedAt?: components["schemas"]["DateTime"];
      BoxSetEpisodeDeletedAt?: components["schemas"]["DateTime"];
      BoxSetTitle?: components["schemas"]["BoxSetTitle"];
      BoxSetSubtitle?: string;
    };
    SearchBoxSetEpisode: components["schemas"]["BoxSetEpisode"] &
      components["schemas"]["SearchBoxSetEpisodeExtra"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    SearchBoxSetExtra: {
      BoxSetDeleted?: components["schemas"]["DateTime"];
    };
    SearchBoxSet: components["schemas"]["BoxSet"] &
      components["schemas"]["SearchBoxSetExtra"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    SearchListenAgainEpisodeExtra: {
      updatedAt: components["schemas"]["DateTime"];
      expiresAt: components["schemas"]["DateTime"];
    };
    SearchListenAgainEpisode: components["schemas"]["ListenAgainEpisode"] &
      components["schemas"]["SearchListenAgainEpisodeExtra"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    SearchListenAgainExtra: {
      ShowTitle: components["schemas"]["ShowTitle"];
      ShowDescription?: components["schemas"]["ShowDescription"];
      ShowUpdatedAt?: components["schemas"]["DateTime"];
      ShowDeletedAt?: components["schemas"]["DateTime"];
      ShowImageUrl?: components["schemas"]["ImageUrl"];
      StationId?: components["schemas"]["StationId"];
      StationName?: components["schemas"]["StationName"];
      presenters?: string[];
    };
    SearchListenAgain: components["schemas"]["ListenAgain"] &
      components["schemas"]["SearchListenAgainExtra"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    SearchPodcastEpisodeExtra: {
      PodcastChannelTitle?: string;
      PodcastChannelKeywords?: string;
      PodcastChannelDescription?: string;
      PodcastUpdatedAt?: components["schemas"]["DateTime"];
      PodcastDeletedAt?: components["schemas"]["DateTime"];
    };
    SearchPodcastEpisode: components["schemas"]["PodcastEpisode"] &
      components["schemas"]["SearchPodcastEpisodeExtra"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    SearchPodcastShowExtra: {
      UpdatedAt?: components["schemas"]["DateTime"];
    };
    SearchPodcastShow: components["schemas"]["PodcastChannelRegion"] &
      components["schemas"]["SearchPodcastShowExtra"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    SearchPresenter: components["schemas"]["Presenter"] &
      components["schemas"]["SearchAppBrandStationCodes"];
    /**
     * @description The different types of "show" collections (Not listen again shows)
     * @enum {string}
     */
    ShowTypes: "podcast" | "boxset" | "listenagain_show";
    ShowBase: {
      id: components["schemas"]["ShowOrAudibleId"];
      type: components["schemas"]["ShowTypes"];
      /** @example Generic Show Title */
      title: string;
      url: components["schemas"]["PageUrl"];
      app_url: components["schemas"]["AppUrl"];
      shuttle_url: components["schemas"]["ShuttleUrl"];
      /** @description Whether the show is featured (more visible) */
      is_featured: boolean;
      /** @description Whether the episodes of the show should be downloadable */
      is_downloadable: boolean;
      /** @description Whether the show is intended only for premium users */
      is_premium_only: boolean;
      last_episode_published_at: components["schemas"]["DateTime"] &
        Record<string, never>;
      /** @description The number of audibles this Show collection contains */
      num_audibles: number;
    };
    Show: components["schemas"]["ShowBase"] &
      components["schemas"]["EmbeddedPodcastShow"] &
      components["schemas"]["EmbeddedBoxSet"] &
      components["schemas"]["EmbeddedListenAgainShow"];
    ShuttleLinkBody: {
      id?: number;
      application_id?: components["schemas"]["AppId"] & Record<string, never>;
      title: string;
      description: string;
      image_url: components["schemas"]["ImageUrl"];
      ios_url: components["schemas"]["AppUrl"];
      android_url: components["schemas"]["AppUrl"];
      desktop_url: components["schemas"]["PageUrl"];
      slug: string;
    };
    ShuttleLinkEntityTypeBody: {
      id?: number;
      application_id: number;
      title: string;
      description: string;
      image_url: components["schemas"]["ImageUrl"];
      slug: string;
      region_id?: components["schemas"]["RegionId"];
      station_id: components["schemas"]["StationId"];
      entity_id: number;
    };
    ShuttleLink: {
      id: number;
      application_id?: number;
      title: string;
      description: string;
      image_url: components["schemas"]["ImageUrl"];
      ios_url: components["schemas"]["AppUrl"];
      android_url: components["schemas"]["AppUrl"];
      desktop_url: components["schemas"]["PageUrl"];
      slug: string;
      url: components["schemas"]["ShuttleUrl"];
    };
    SignInIncentive: {
      /** @description Unique identifier for sign in incentive */
      SignInIncentiveId: number;
      /** @description Default Header text */
      SignInIncentiveHeader: string;
      /** @description Default overview text */
      SignInIncentiveOverview: string;
      SignInIncentiveImage: components["schemas"]["ImageUrl"] &
        Record<string, never>;
      SignInIncentiveMobileImage: components["schemas"]["ImageUrl"] &
        Record<string, never>;
      SignInIncentiveTabletImage: components["schemas"]["ImageUrl"] &
        Record<string, never>;
      /** @description Benefit Header 1 text */
      SignInIncentiveBenefitHeader1: string;
      /** @description Benefit Header 2 text */
      SignInIncentiveBenefitHeader2: string;
      /** @description Benefit Header 3 text */
      SignInIncentiveBenefitHeader3: string;
      /** @description Benefit Header 4 text */
      SignInIncentiveBenefitHeader4: string;
      /** @description Benefit Header 5 text */
      SignInIncentiveBenefitHeader5: string;
      /** @description Benefit Header 6 text */
      SignInIncentiveBenefitHeader6: string;
      /** @description Benefit 1 text */
      SignInIncentiveBenefit1: string;
      /** @description Benefit 2 text */
      SignInIncentiveBenefit2: string;
      /** @description Benefit 3 text */
      SignInIncentiveBenefit3: string;
      /** @description Benefit 4 text */
      SignInIncentiveBenefit4: string;
      /** @description Benefit 5 text */
      SignInIncentiveBenefit5: string;
      /** @description Benefit 6 text */
      SignInIncentiveBenefit6: string;
      SignInIncentiveWebUrl: components["schemas"]["PageUrl"] &
        Record<string, never>;
      /** @description Number of skips allowed for mandatory login */
      SignInIncentiveTotalSkips: number;
    };
    StationOnAir: {
      showId: components["schemas"]["ShowId"];
      /** @example Mark Goodier */
      episodeTitle: string;
      /** @example Mark brings you My Greatest Hit, Their Greatest Hit and the Music Jam. */
      episodeDescription: string;
      /** @example "2023-01-30T11:00:00.000Z" */
      episodeStart: string;
      episodeDuration: components["schemas"]["DurationInSeconds"];
      episodeImageUrl: components["schemas"]["ImageUrl"];
      episodeIsSkippable: boolean;
    };
    StationStream: {
      streamUrl: components["schemas"]["StreamUrl"];
      streamUsersOnly: boolean;
      /** @enum {string} */
      streamType: "mp3" | "adts" | "hls";
      streamBitRate: number | null;
      /** @enum {string} */
      streamQuality: "lq" | "hq";
      streamPremium: boolean;
      streamAdswizzEnabled?: boolean;
    };
    /**
     * @description The type of station, most-use cases will only use "radio"
     * @enum {string}
     */
    StationType: "radio" | "box_set" | "tv";
    /**
     * @description Hints at which login flows should be used
     * @enum {string}
     */
    LoginType: "disabled" | "enabled" | "optional";
    StationMinified: {
      stationId: components["schemas"]["StationId"];
      stationCode: components["schemas"]["StationCode"];
      stationName: components["schemas"]["StationName"];
      stationType: components["schemas"]["StationType"];
      stationBrandCode: components["schemas"]["BrandCode"];
      stationListenBarLogo: components["schemas"]["ImageUrl"];
      stationSmartLink: components["schemas"]["ShuttleUrl"];
      stationBrandColour: components["schemas"]["HexCodeColor"];
      /** @example Real music matters */
      stationStrapline: string;
      /**
       * @description Unique identifier for DADI/Content systems
       * @example absolute-radio
       */
      stationDADIChannelId: string;
      stationNowPlaying: components["schemas"]["NowPlayingSimple"];
      stationOnAir?: components["schemas"]["StationOnAir"];
      /** @description Split stations */
      stationSplits?: components["schemas"]["SplitStationMinified"][];
      stationIsAdswizzEnabled?: components["schemas"]["NumericBoolean"];
      stationStreams?: components["schemas"]["StationStream"][];
      stationNielsenVcid?: components["schemas"]["NielsenVcid"];
      stationLoginType?: components["schemas"]["LoginType"];
    } & components["schemas"]["StationAttributes"];
    /** @description Reduced-down split station */
    SplitStationMinified: {
      stationId: components["schemas"]["StationId"];
      stationCode: components["schemas"]["StationCode"];
      stationName: components["schemas"]["StationName"];
      webDfpAdPath?: components["schemas"]["DfpAdPath"];
      subRegionSlug?: string;
    };
    /** @description Properties that always belong to a fully inflated station */
    StationBase: {
      stationId: components["schemas"]["StationId"];
      stationCode: components["schemas"]["StationCode"];
      stationName?: components["schemas"]["StationName"];
      stationType: components["schemas"]["StationType"];
      stationRegion: components["schemas"]["RegionCode"];
      stationAppId: components["schemas"]["AppId"];
      stationAppCode: components["schemas"]["AppCode"];
      stationBrandCode: components["schemas"]["BrandCode"];
      stationBrandId: components["schemas"]["BrandId"];
      stationNewsletterCode: string;
      stationNetworkId: components["schemas"]["NetworkId"];
      /** @description Based on the region, hints at how the stations are ordered by default by the API */
      stationOrderMode: number;
      /** @description An explicit sorting priority, related to StationOrderMode */
      stationOrder: number;
      /** @description Hints at how the station is to be ordered in relation to the brand */
      brandOrder: number;
      stationRecommended: components["schemas"]["StringBoolean"];
      stationHeaderLogo: components["schemas"]["StationHeaderLogo"];
      stationHeaderLogoSVG: components["schemas"]["StationHeaderLogoSVG"];
      stationListenBarLogo?: components["schemas"]["StationListenBarLogo"];
      stationHeroImage: components["schemas"]["StationHeroImage"];
      stationMobileHeroImage: components["schemas"]["StationMobileHeroImage"];
      stationWhiteLogoImage: components["schemas"]["StationWhiteLogoImage"];
      stationLockScreenImage: components["schemas"]["StationLockScreenImage"];
      stationSmartLink: components["schemas"]["ShuttleUrl"];
      stationBrandColour: components["schemas"]["HexCodeColor"];
      stationFacebook: string;
      facebookAppId?: string;
      stationTwitter: string;
      stationInstagram: string;
      stationYouTube?: string;
      /** @example Real music matters */
      stationStrapline: string;
      configStraplineImageUrl: components["schemas"]["ImageUrl"];
      stationHomepage: components["schemas"]["PageUrl"];
      /**
       * @description Unique identifier for DADI/Content systems
       * @example absolute-radio
       */
      stationDADIChannelId?: string;
      stationDADIType: string;
      stationSplitGroup: string;
      stationSplitGroupId: number;
      stationStudioEmail: components["schemas"]["Email"];
      /** Format: uri */
      stationPlaylistUrl: string;
      /** @example Please login to hear this */
      stationLoginMessage?: string;
      stationPreviewAudioUrl?: components["schemas"]["StreamUrl"];
      stationWelcomeAudioUrl: components["schemas"]["StreamUrl"];
      stationNowPlaying: components["schemas"]["NowPlayingSimple"];
      stationPlayHistory: components["schemas"]["NowPlayingSimple"][];
      stationOnAir: components["schemas"]["StationOnAir"];
      /** @description Which services the station broadcasts to */
      stationBroadcastMedia?: components["schemas"]["BroadcastMediaTypes"][];
      stationAACStream?: components["schemas"]["StreamUrl"];
      stationMP3Stream: components["schemas"]["StreamUrl"];
      stationLat: number;
      stationLon: number;
      stationPlayerUrl?: components["schemas"]["PageUrl"] & string;
      /** @description Whether Adswizz integration is enabled */
      stationIsAdswizzEnabled: boolean;
      stationAdswizzZone: string;
      stationAdswizzUrl: components["schemas"]["ApiUrl"] & string;
      stationAppleMusicEnabled: components["schemas"]["NumericBoolean"];
      /**
       * @description Radio terminology, a unique identifier that the station operates with
       * @example [
       *   "dab:ce1.c181.c1c0.0"
       * ]
       */
      stationBearers?: string[];
      stationTermsUrl: components["schemas"]["PageUrl"];
      stationPrivacyUrl: components["schemas"]["PageUrl"];
      stationAdswizzPublisherId: string;
      stationAdswizzFillerZoneId: string;
      stationAdswizzFillerAdvertiserId: string;
      stationZettaAdsId: string;
      stationStreams: components["schemas"]["StationStream"][];
      /** @description The stream delay for the station, in seconds */
      stationStreamDelay: number;
      stationFeedbackEmail: components["schemas"]["Email"];
      appGoogleBundleId: string;
      appITunesStoreId: string;
      stationNielsenVcid?: components["schemas"]["NielsenVcid"];
      stationContentPriority: components["schemas"]["ShowOrAudibleId"][];
      stationServiceId: components["schemas"]["StationId"];
      stationRadioplayerId: number;
      configBannerDesktopImageUrl: components["schemas"]["ImageUrl"];
      configBannerMobileImageUrl: components["schemas"]["ImageUrl"];
      configBannerTarget: string;
      configBannerAlt: string;
      configBannerUrl?: components["schemas"]["ImageUrl"];
    };
    StationWithChildren: {
      /** @description Stations that are related to this station, by brand */
      stationBrandRelated: components["schemas"]["BrandRelatedStation"][];
      /** @description Stations that are related to this station, in general */
      stationRelated: components["schemas"]["RelatedStation"][];
      /** @description Stations that are related to this station, in general */
      stationSplits: components["schemas"]["SplitStation"][];
    };
    StationWithoutChildren: {
      /** @description Empty array */
      stationBrandRelated: Record<string, never>[];
      /** @description Empty array */
      stationRelated: Record<string, never>[];
      /** @description Empty array */
      stationSplits: Record<string, never>[];
    };
    /** @description Station attributes that are optional in the response */
    StationAttributes: {
      heroImageMask?: string;
      stationSquareLogo?: components["schemas"]["ImageUrl"];
      stationLoginType?: components["schemas"]["LoginType"];
      /** @description Whether the station has a schedule */
      hasSchedule?: number;
      secondaryColourHex?: components["schemas"]["HexCodeColor"];
      radioplayerUrl?: components["schemas"]["PageUrl"] & Record<string, never>;
      webWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      radioWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      mobileWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      speakersWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      amazonAlexaInvocation?: string;
      googleHomeInvocation?: string;
      applePodInvocation?: string;
      trafficTravelUrl?: components["schemas"]["PageUrl"] & string;
      /**
       * @description Unique identifier for responsys
       * @example ABR
       */
      responsysCode?: string;
      stationWikipediaUrl?: components["schemas"]["PageUrl"];
      amazonAlexaSkillUrl?: components["schemas"]["PageUrl"] & string;
      applePodSkillUrl?: components["schemas"]["PageUrl"] &
        Record<string, never>;
      googleHomeSkillUrl?: components["schemas"]["PageUrl"] &
        Record<string, never>;
      sonosIsEnabled?: components["schemas"]["NumericBoolean"];
      chromecastIsEnabled?: components["schemas"]["NumericBoolean"];
      tvGamingWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      xboxAppStoreUrl?: components["schemas"]["PageUrl"] &
        Record<string, never>;
      psAppStoreUrl?: components["schemas"]["PageUrl"] & Record<string, never>;
      appleTvEnabled?: components["schemas"]["NumericBoolean"];
      carWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      carPlayIsEnabled?: components["schemas"]["NumericBoolean"];
      androidAutoEnabled?: components["schemas"]["NumericBoolean"];
      carModeEnabled?: components["schemas"]["NumericBoolean"];
      wearablesWaysToListenIsEnabled?: components["schemas"]["NumericBoolean"];
      appleWatchEnabled?: components["schemas"]["NumericBoolean"];
      androidWatchEnabled?: components["schemas"]["NumericBoolean"];
      /** @description Username for Station's TikTok */
      stationTiktok?: string;
      stationGenreTags?: string[];
      positioningStatementTitle?: string;
      positioningStatementDescription?: string;
      teslaNavItemFirstStationName?: components["schemas"]["StationName"];
      /** Format: uri */
      teslaNavItemFirstStationUrl?: string;
      teslaNavItemSecondStationName?: components["schemas"]["StationName"];
      /**
       * @description Can be one of either a string or a URL
       * @example
       */
      teslaNavItemSecondStationUrl?: string | null;
      isContactManagerEnabled?: components["schemas"]["NumericBoolean"];
      isCashRegisterEnabled?: components["schemas"]["NumericBoolean"];
      cashRegisterHomepageHeroImageDesktop?: components["schemas"]["ImageUrl"];
      cashRegisterHomepageHeroImageMobile?: components["schemas"]["ImageUrl"];
      promotionalCashRegisterBannerDesktop?: components["schemas"]["ImageUrl"];
      promotionalCashRegisterBannerMobile?: components["schemas"]["ImageUrl"];
      vanityUrl?: components["schemas"]["PageUrl"];
      nielsenGroupId?: number;
      alternativeStationNames?: string;
      showInAlexaFeed?: components["schemas"]["NumericBoolean"];
      /** @example NIR */
      constituentCountry?: string;
      hlsStreamEnabled?: components["schemas"]["NumericBoolean"];
      hlsInteractiveStream?: components["schemas"]["NumericBoolean"];
      hlsPlayFromShowStart?: components["schemas"]["NumericBoolean"];
      hlsPlayFromSongStart?: components["schemas"]["NumericBoolean"];
      hlsSuperBuffer?: number;
      copyrightTextOverride?: string;
      enableTrackReactions?: components["schemas"]["NumericBoolean"];
      formerStationName?: components["schemas"]["StationName"];
      stationLqHLSUrl?: components["schemas"]["StreamUrl"] & string;
      stationHqHLSUrl?: components["schemas"]["StreamUrl"] & string;
      /** @description A list of Alexa-recognised genres */
      amazonAlexaGenres?: string[];
      skipTracksEnabled?: components["schemas"]["NumericBoolean"];
      premiumEnabled?: components["schemas"]["NumericBoolean"];
      subRegionSlug?: components["schemas"]["RegionCode"];
      stationScheduleURL?: string;
      premiumOnlyStation?: components["schemas"]["NumericBoolean"];
      rcsSkipEnabled?: components["schemas"]["NumericBoolean"];
      hlsDvrSkipEnabled?: components["schemas"]["NumericBoolean"];
      welcomeMessageAudioUrl?: components["schemas"]["StreamUrl"];
      premiumOnlyAudioMessage?: components["schemas"]["StreamUrl"];
      stationAreaServed?: string;
      stationAdvertiseUrl?: components["schemas"]["PageUrl"];
      stationSubregion?: components["schemas"]["RegionCode"];
      webDfpAdPath?: components["schemas"]["DfpAdPath"];
    };
    Station: components["schemas"]["StationBase"] &
      components["schemas"]["StationWithChildren"] &
      components["schemas"]["StationAttributes"] &
      Record<string, never>;
    ChildStation: components["schemas"]["StationBase"] &
      components["schemas"]["StationWithoutChildren"] &
      components["schemas"]["StationAttributes"] &
      Record<string, never>;
    StationNowPlaying: {
      stationCode?: string;
      stationNowPlaying?: components["schemas"]["NowPlayingSimple"];
      stationOnAir?: components["schemas"]["StationOnAir"];
    };
    StationUtterance: {
      stationName: components["schemas"]["StationName"] & Record<string, never>;
      stationCode: components["schemas"]["StationCode"] & Record<string, never>;
      utterances: components["schemas"]["UtteranceGroup"];
    };
    /** @description A map of utterances, grouped by device-type then locale */
    UtteranceGroup: {
      alexa?: components["schemas"]["DeviceUtteranceLocales"];
      apple?: components["schemas"]["DeviceUtteranceLocales"];
      google?: components["schemas"]["DeviceUtteranceLocales"];
    };
    DeviceUtteranceLocales: {
      /** @description English locales */
      en?: string[];
      /** @description Portuguese locales */
      pt?: string[];
    };
    BrandRelatedStation: components["schemas"]["StationBase"];
    RelatedStation: components["schemas"]["StationBase"];
    SplitStation: components["schemas"]["StationBase"];
    StationsByPort: {
      PORT?: string;
      [key: string]: unknown;
    };
    Ticket: {
      title?: string;
      shortdesc?: string;
      image_url?: components["schemas"]["ImageUrl"];
      image_square_url?: components["schemas"]["ImageUrl"];
      image_alt?: string;
      expiry?: string;
      url?: components["schemas"]["PageUrl"];
    };
    TokenStatus: {
      /** @description Just return when the request is successful. */
      success?: boolean;
      /** @description Just return when the request fails. */
      error?: string;
    };
    Travel: {
      lat?: number;
      lon?: number;
      national?: number;
      priority?: number;
      locationName?: string;
      description?: string;
    };
    UserPremiumStatus: {
      state: string;
      trial_used: string;
      payment_source: string;
      expired_at?: string;
    };
    CurrentAndFutureEvents: {
      current?: components["schemas"]["XmlEvent"];
      future?: components["schemas"]["XmlEvent"];
    };
    XmlEvent: {
      html?: string;
      fullscreen?: string;
    };
    Broadcaster: {
      "@type"?: string;
      "@id"?: string;
      name?: string;
      sameAs?: string;
    };
    BroadcastFrequency: {
      "@type"?: string;
      broadcastFrequencyValue?: string;
      broadcastSignalModulation?: string;
    };
    BroadcastArea: {
      "@type"?: string;
      name?: string;
    };
    RegionFeedLogo: {
      "@type"?: string;
      height?: string;
      width?: string;
      /** Format: uri */
      contentUrl?: string;
    };
    PotentialAction: {
      "@type"?: string;
      target?: components["schemas"]["PotentialActionTarget"][];
      actionAccessibilityRequirement?: components["schemas"]["PotentialActionAccessibilityRequirement"];
    };
    PotentialActionTarget: {
      "@type"?: string;
      /** Format: uri */
      urlTemplate?: string;
      actionPlatform?: string[];
    };
    PotentialActionAccessibilityRequirement: {
      "@type"?: string;
      category?: string;
      eligibleRegion?: components["schemas"]["AccessibilityRegion"][];
    };
    AccessibilityRegion: {
      "@type"?: string;
      name?: string;
    };
    DadiSchedule: {
      /** @description This object keys is returned as DATE in the "YYYY-MM-DD" format */
      "YYYY-MM-DD"?: components["schemas"]["DadiScheduleDate"][];
      [key: string]: unknown;
    };
    DadiScheduleDate: components["schemas"]["Schedule"];
  };
  responses: {
    /** @description OK */
    StationResponse: {
      content: {
        "*/*": components["schemas"]["Station"];
      };
    };
    /** @description OK */
    StationsResponse: {
      content: {
        "*/*": components["schemas"]["Station"][];
      };
    };
    /** @description Placeholder for likely-unused endpoints which are blocking apigw deployment */
    Todo: {
      content: {
        "*/*": Record<string, never>;
      };
    };
  };
  parameters: {
    /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
    _filter?: string[];
    /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
    _o?: string;
    /** @description Pagination: Items per page */
    _pp?: number;
    /** @description Include Premium content in results */
    premium?: 0 | 1;
    /** @description Pagination: Page number */
    _p?: number;
    /** @description ISO-3166-2 Region code */
    regionCode:
      | "GB"
      | "NO"
      | "DK"
      | "FI"
      | "SE"
      | "DE"
      | "GR"
      | "CY"
      | "RO"
      | "MD"
      | "PL"
      | "IE";
    /** @description ISO-3166-2 Region code */
    shepherdRegionCode?: "GB" | "DK" | "NO" | "FI" | "SE" | "GR" | "RO";
    /** @description Used by phone applications to identify their source type */
    appPlatform: string;
    /** @description Specific date to get results greater than or equal to. Examples `2021-02-02 01:01:01`, `10 minutes ago` */
    since?: string;
    /** @description Unique identifier for a Device */
    udid: string;
    /** @description Filter by using the brand code */
    brandCode?: string;
    /** @description Required when using test parameter (Is it needed to be a valid IP address). */
    "x-forwarded-for"?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get a list of all active aggregator brands
   * @description Retrieve list of aggregator brands
   */
  getAggregatorBrands: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AggregatorBrandResponse"];
        };
      };
    };
  };
  /**
   * Get applications object
   * @description Return a list of all Applications
   */
  getApps: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AppListResponse"];
        };
      };
    };
  };
  /**
   * Get artist (Absolute only)
   * @deprecated
   * @description Retrieve Artist Record
   */
  getAbsoluteArtistById: {
    parameters: {
      path: {
        /** @description Unique identifier for the an Artist, used only by Absolute Radio */
        absoluteArtistId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Artist"];
        };
      };
    };
  };
  /**
   * Get audibles. (AppCode OR RegionCode OR StationCode OR BrandCode is required)
   *
   * @description Retrieve list of audible content (podcasts, box set episodes,
   * listen again episodes)
   * <hr>
   * <strong style="color:red">*One of these parameters is required: `AppCode`, `BrandCode`, `StationCode`, `RegionCode`</strong>
   */
  getAudibles: {
    parameters: {
      query?: {
        /**
         * @description Filter by App(Code).
         * This parameter is incompatible with `BrandCode`, `RegionCode`, and `StationCode` parameters.
         */
        AppCode?: string;
        /**
         * @description Filter by Region(Code).
         * This parameter is incompatible with `BrandCode`, `AppCode`, and `StationCode` parameters.'
         */
        RegionCode?: string;
        /**
         * @description Force shuttle links to use this AppCode.
         * This parameter is ONLY compatible with `RegionCode` parameters.'
         */
        ForceAppCode?: string;
        /**
         * @description Filter by Brand(Code).
         * This parameter is incompatible with `AppCode`, `RegionCode`, and `StationCode` parameters.'
         */
        BrandCode?: string;
        /**
         * @description Filter by Station(Code).
         * This parameter is incompatible with `BrandCode`, `AppCode`, and `RegionCode` parameters.'
         */
        StationCode?: string;
        /** @description Filter by multiple audible types */
        "type[]"?: ("podcast_episode" | "boxset_episode" | "listenagain")[];
        /** @description Filter by single audible type */
        type?: ("podcast_episode" | "boxset_episode" | "listenagain")[];
        /** @description Group by latest parent (definition of differs by type) */
        latest?: boolean;
        /** @description Filter response so it will only return podcasts that match `PodcastChannelId`* */
        "podcast_episode.PodcastChannelId[]"?: number[];
        /** @description Filter response so it will only return boxsets that match `BoxSetId`* */
        "boxset_episode.BoxSetId[]"?: number[];
        /** @description Filter response so it will only return listen again items that match `ShowId`* */
        "listenagain.ShowId[]"?: number[];
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Audible"][];
        };
      };
    };
  };
  /**
   * Get set episodes object
   * @description Retrieve set episodes (JSON) -- Not on phones
   */
  getBoxsetEpisodesByStationCode: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["BoxSetEpisode"][];
        };
      };
    };
  };
  /**
   * Get BoxSet and its episodes
   * @description Deprecated? Prefer getShows
   */
  getBoxset: {
    parameters: {
      query?: {
        /** @description Return all boxSets associated with a Station inside a child <item> */
        show_items?: string;
      };
      path: {
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Filter by Station(Code). */
        stationCode: string;
        /** @description Quality of stream. Similar to but not bandwidth */
        streamQuality: "hq" | "sq" | "wifi" | "cellular";
        /** @description Device's connection<hr><small><strong>Format:</strong> llwstring|numeric<br><strong>Example:</strong> cellular|10943302 */
        streamConnection: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
      };
    };
    responses: {
      /** @description Returns a BoxSet and its episodes */
      200: {
        content: {
          "*/*": components["schemas"]["BoxSet"];
        };
      };
    };
  };
  /** Index of brand entities */
  getBrands: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Brand"][];
        };
      };
    };
  };
  /** Get brand object */
  getBrandByBrandCode: {
    parameters: {
      path: {
        brandCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Brand"];
        };
      };
    };
  };
  /** Get station details */
  getArticleByStationCode: {
    parameters: {
      path: {
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ContentArticle"];
        };
      };
    };
  };
  /** Get station details for Dadi ID */
  getArticleByDadiIdAndFilter: {
    parameters: {
      path: {
        dadiId: string;
        /** @description Filter by station region competition category */
        filter: "comps";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ContentArticle"];
        };
      };
    };
  };
  /** Get station details for Dadi ID */
  getArticleByDadiId: {
    parameters: {
      path: {
        dadiId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ContentArticle"];
        };
      };
    };
  };
  /** Get station details */
  getArticleByStationCodeAndFilter: {
    parameters: {
      path: {
        stationCode: string;
        /** @description Filter by station region competition category */
        filter: "comps";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ContentArticle"][];
        };
      };
    };
  };
  /**
   * DEPRECATED. Get device tokens object
   * @deprecated
   * @description DEPRECATED. Index of device tokens
   */
  getDevicesTokens: {
    parameters: {
      query: {
        /** @description Filter by Application codes or IDs */
        "applications[]": string[];
        /** @description Filter based on operating system(s) */
        "types[]"?: ("ios" | "and")[];
        /** @description Types 'tokens' or 'data' return device token and user id. Type 'count' retuns quantity of existent tokens. */
        _aggregate?: "tokens" | "data" | "count";
        /** @description Filter based on account ids */
        "accounts[]"?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Device"][];
        };
      };
    };
  };
  /**
   * DEPRECATED. Get device token object
   * @deprecated
   * @description DEPRECATED. Stores information about pushable device - {token} is unique identifier
   */
  getDeviceToken: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Unique identifier for an Application */
        applicationCode: string;
        /** @description <u>Device</u> Token. Used to send push notifications to phones (<a href='https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html'>more</a>) */
        token: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["DeviceToken"];
        };
      };
    };
  };
  /**
   * Retrieve show information.
   *
   * The "showId" is more like "listen again show id", but this endpoint
   * will also return non-listen again content too
   *
   * Non-listen again: Static content, mostly likely refering to a
   * podcast channel without
   * an explicit link)
   */
  getEpgShow: {
    parameters: {
      path: {
        showId: number;
      };
    };
    responses: {
      /** @description The requested EPG Show, or a fallback if it does not exist */
      200: {
        content: {
          "*/*": components["schemas"]["EpgShow"];
        };
      };
    };
  };
  /**
   * Retrieve raw-ish event record
   * @description Retrieve raw-ish event record
   */
  getEventById: {
    parameters: {
      path: {
        /** @description Filter by Event ID */
        eventId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Event"];
        };
      };
    };
  };
  /**
   * Get playlist with a Dadi ID
   * @description Retrieve "events" but with a Dadi ID
   */
  getEventsByDadiId: {
    parameters: {
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
        date: string;
        time: string;
        limit: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NowPlayingSimple"][];
        };
      };
    };
  };
  /**
   * Get playlist
   * @description Retrieve up to {limit} events up until {time}
   */
  getEventsByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
        time: string;
        limit: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NowPlayingSimple"][];
        };
      };
    };
  };
  /**
   * Get event object
   * @description Retrieve parsed event record (Generally more useful than eventdata)
   */
  getEvent: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Filter by Station(Code). */
        stationCode: string;
        timeCode: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["EventsXml"];
        };
      };
    };
  };
  /**
   * DEPRECATED. Delete multiple tokens
   * @deprecated
   */
  forgetTokens: {
    parameters: {
      query?: {
        "tokens[]"?: string[];
      };
    };
    responses: {
      /** @description What tokens? */
      200: {
        content: {};
      };
    };
  };
  /**
   * "init" but with Dadi ID
   * @description "init" but with Dadi ID
   */
  initWithDadiId: {
    parameters: {
      query?: {
        /** @description Filter brand related stations by station type */
        "stationBrandRelated.StationType[]"?: (
          | "radio"
          | "box set"
          | "television"
        )[];
        /** @description Filter related stations by station type */
        "stationRelated.StationType[]"?: ("radio" | "box set" | "television")[];
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: string;
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Station"];
        };
      };
    };
  };
  /**
   * Retrieve a station's (potentially random) HTML Panel
   * @description Retrieve a station's (potentially random) HTML Panel
   */
  initWithStationCode: {
    parameters: {
      query?: {
        /** @description Filter brand related stations by station type */
        "stationBrandRelated.StationType[]"?: (
          | "radio"
          | "box set"
          | "television"
        )[];
        /** @description Filter related stations by station type */
        "stationRelated.StationType[]"?: ("radio" | "box set" | "television")[];
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: string;
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Station"];
        };
      };
    };
  };
  /**
   * Retrieve {station} configuration (Phones)
   * @description Retrieve {station} configuration (Phones)
   */
  initApp: {
    parameters: {
      query?: {
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: string;
        /** @description Output station data in response */
        outputStations?: boolean;
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Geographical coordinates */
        location: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
        advertiserId: number;
        deeplink: string;
      };
    };
    responses: {
      /** @description Successful */
      200: {
        content: {
          "application/xml": components["schemas"]["Init"];
        };
      };
    };
  };
  /**
   * Get full screen streaming ad object
   * @description Returns xml document describing a full screen streaming ad
   */
  getInstream: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Filter by Station(Code) */
        stationCode: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
        duration: string;
        /** @description Unused */
        adType: string;
        /** @description String added to adswizz URL. */
        metaData: string;
        bandwidth: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Instream"];
        };
      };
    };
  };
  /**
   * Get the latest 250 events for a Station
   * @description Retrieve "events" but with a Dadi ID
   */
  latestEvents: {
    parameters: {
      query?: {
        /** @description Unique Station identifier for Publish */
        DadiCode?: string;
        /** @description Unique Station code */
        StationCode?: string;
        /** @description Unique Station id */
        StationId?: string;
        /** @description Time offset to retrieve events from (backwards) */
        from?: string;
        /** @description Order events */
        _o?: "asc" | "desc";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NowPlayingReduced"][];
        };
      };
    };
  };
  /** Get listen again episodes */
  getListenAgainByDadiId: {
    parameters: {
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: components["schemas"]["ListenAgainEpisode"][];
          };
        };
      };
    };
  };
  /**
   * Get listenagain object
   * @description Retrieve historical play information for {station}
   */
  getListenAgainByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: components["schemas"]["ListenAgainEpisode"][];
          };
        };
      };
    };
  };
  /** Logs a "listen" */
  getListenLogs: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Filter by Station(Code). */
        stationCode: string;
        /** @description Quality of stream. Similar to but not bandwidth */
        streamQuality: "hq" | "sq" | "wifi" | "cellular";
        /** @description Device's connection<hr><small><strong>Format:</strong> llwstring|numeric<br><strong>Example:</strong> cellular|10943302 */
        streamConnection: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
        advertiserId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ListenXml"];
        };
      };
    };
  };
  /**
   * Get user information
   * @description Given valid credentials, will provide user information and hint at how long their cookie should last (not authentication!)
   */
  login: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Geographical coordinates */
        location: string;
        /** @description Email address of an Account */
        email: string;
        /** @description User's password */
        password: string;
        /** @description Unused. Potentially the same as Token */
        device: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Logs logging user out
   * @description Logs logging user out (does not actually log user out, pretty much just logs it)
   */
  logout: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Register any log
   * @description Generic incoming logger so external applications can send any log they like
   */
  log: {
    parameters: {
      header?: {
        /** @description UserId */
        USER?: number;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @description Entity Type */
          type: string;
          /** @description Entity identifier */
          entity: string;
          /** @description Message */
          message: string;
          /** @description Additional Data */
          also?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /** Returns 4 randomly ordered local stations */
  luckydip: {
    parameters: {
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Get JWT token
   * @description One-time request to obtain JWT token without user credentials (<a href="https://bauer-specialist.atlassian.net/wiki/spaces/AUD/pages/773947418">readme</a>)
   */
  makeToken: {
    parameters: {
      path: {
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
        deviceId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TokenStatus"];
        };
      };
    };
  };
  /**
   * Get split stations near user
   * @description Returns nearby stations split based range of users location
   */
  getLocalStations: {
    parameters: {
      query: {
        /** @description Current user latitude */
        latitude: string;
        /** @description Current user longitude */
        longitude: string;
      };
      path: {
        /** @description Filter by regionCode. */
        regionCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": (components["schemas"]["StationCode"] & string)[];
        };
      };
    };
  };
  /**
   * Get nearby split stations
   * @description Returns nearby stations split based on user location
   */
  getNearbyStations: {
    parameters: {
      query?: {
        /** @description Current user ip used to specify user location. */
        userIp?: string;
        /** @description Current user latitude. Mandatory when passing coordinates[lon]. */
        "coordinates[lat]"?: string;
        /** @description Current user longitude. Mandatory when passing coordinates[lat]. */
        "coordinates[lon]"?: string;
      };
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
    };
  };
  /**
   * Get station networks
   * @description Return the station networks
   */
  getNetworks: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Network"][];
        };
      };
    };
  };
  /**
   * Get nowplaying object
   * @description Return what is currently playing on {station}
   */
  getNowPlayingByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
        /** @description Expected response type */
        responseType: "json" | "xml";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NowPlaying"];
        };
      };
    };
  };
  /**
   * Get nowplaying object with small time adjustment so it aligns to realtime
   * @description Return what is currently playing on {station}
   */
  getOaNowPlayingByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
        /** @description Expected response type */
        responseType: "json" | "xml";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NowPlaying"];
        };
      };
    };
  };
  /** Get playlist information for a show or station. Must provide one of ScheduleId, StationCode */
  getPlaylist: {
    parameters: {
      query?: {
        /** @description Query for a specific schedule's playlist. Infers "StationCode", "from" and "to" */
        ScheduleId?: number;
        /** @description Query for a station's playlist */
        StationCode?: string;
        /** @description Filter for tracks played at or after this time (Only works with StationCode) */
        from?: string;
        /** @description Filter for tracks played before this time (Only works with StationCode) */
        until?: string;
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description Successfully retrieved playlist */
      200: {
        content: {
          "*/*": components["schemas"]["NowPlayingSimple"][];
        };
      };
    };
  };
  /** Return Podcast Channels that belong to {station} */
  getPodcastChannelsDadiByDadiId: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastChannelRegion"][];
        };
      };
    };
  };
  /** Get list of all featured podcasts */
  getFeaturedPodcastsByRegion: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastChannelRegion"][];
        };
      };
    };
  };
  /** Get list of all podcasts by region. */
  podcastsByRegionCode: {
    parameters: {
      query?: {
        "StationId[]"?: number[];
        "AppId[]"?: number[];
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastChannelRegion"][];
        };
      };
    };
  };
  /**
   * Get podcast channels station object
   * @description Return Podcast Channels that belong to {station}
   */
  podcastchannelsstation: {
    parameters: {
      path: {
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastChannelRegion"][];
        };
      };
    };
  };
  /** Find all podcasts by channel */
  getPodcastsByChannel: {
    parameters: {
      query?: {
        "PodcastSeasonNumber[]"?: number[];
        "PodcastRadioplayId[]"?: number[];
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      path: {
        /** @description podcastChannel */
        podcastchannel: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastChannelEpisodes"];
        };
      };
    };
  };
  /**
   * Get podcasts object
   * @description Return Podcasts that belong to {podcastChannel}
   */
  getPodcastsByChannelId: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      path: {
        /** @description Unique identifier of a Podcast Channel */
        podcastChannelId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastEpisode"][];
        };
      };
    };
  };
  /** Get podcasts by station code */
  getPodcastsChannelsByStationCode: {
    parameters: {
      path: {
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastChannelRegion"][];
        };
      };
    };
  };
  /**
   * Get podcast object
   * @description Same as `/podcastsbyid/{podcastId}` except the Podcast Channel is merged with Podcast
   */
  getPodcastById: {
    parameters: {
      path: {
        /** @description Unique identifier for a Podcast */
        podcastId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PodcastEpisode"];
        };
      };
    };
  };
  /**
   * Return subscription status for a user
   * @description Returns premium subscription status for a user, via the Bearer auth header
   */
  premiumStatusForUser: {
    parameters: {
      query?: {
        /** @description ISO-3166-2 Region code */
        regionCode?: "GB" | "DK" | "NO" | "FI" | "SE" | "GR" | "RO";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserPremiumStatus"];
        };
      };
      /** @description Invalid Bearer token. */
      404: {
        content: {};
      };
    };
  };
  /** Get Premium Incentive information for a Station */
  getPremiumForStation: {
    parameters: {
      path: {
        /** @description The Station to which the premium incentive is attached to */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Premium"][];
        };
      };
    };
  };
  /** Get Premium Incentive information for an App */
  getPremiumForApp: {
    parameters: {
      path: {
        /** @description The App to which the premium incentive is attached to */
        appCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Premium"][];
        };
      };
    };
  };
  /** Get Premium Incentive information for a Region */
  getPremiumForRegion: {
    parameters: {
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Premium"][];
        };
      };
    };
  };
  /** Get presenter by ID */
  getPresenterById: {
    parameters: {
      path: {
        /** @description Respective presenter id */
        presenterId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Presenter"];
        };
      };
    };
  };
  /** Get presenters. (stationId OR stationCode OR brandCode parameter is required) */
  getPresenters: {
    parameters: {
      query?: {
        /** @description Filter based on Station ID */
        stationId?: number;
        /** @description Filter based on Station Code */
        stationCode?: string;
        /** @description Filter based on Brand Code */
        brandCode?: string;
        /** @description Filter based on Region Code */
        regionCode?: string;
        /** @description Filter by presenters who have been updated/deleted since this time, additionally includes inactive presenters */
        since?: string;
        /** @description Filter multiple presenter by id; */
        "presenterId[]"?: number[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Presenter"][];
        };
      };
    };
  };
  /** Specific endpoint to Google Home Feed */
  getRegionsMetaByRegionCode: {
    parameters: {
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description Returns regions based on */
      200: {
        content: {
          "*/*": components["schemas"]["RegionsMeta"];
        };
      };
    };
  };
  /**
   * Get regions object
   * @description List of regions
   */
  getRegions: {
    parameters: {
      query?: {
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description Return all available regions */
      200: {
        content: {
          "*/*": components["schemas"]["Region"][];
        };
      };
    };
  };
  /**
   * Creates a user account
   * @description Creates a user account
   */
  registerUser: {
    parameters: {
      path: {
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Full name of an Account */
        fullName: string;
        /** @description Email address of an Account */
        email: string;
        /**
         * @description Allowed genders:
         *  * `f` - Female
         *  * `m` - Male
         *  * `n` - Non-Binary, Binary gender of an Account
         *  * `o` - Other Gender, "Value" is prefixed with "o" (e.g. "oValue")
         */
        gender: string;
        /** @description Geographical coordinates */
        location: string;
        /** @description Age in years */
        age: number;
        /** @description User's password */
        password: string;
      };
    };
    requestBody?: {
      content: {
        "*/*": {
          /**
           * @description The type of user acquisition source
           * @example Livestream
           */
          source?: string;
          /**
           * @description A uniquely identifiable user acquisition source
           * @example Kiss Haunted House Party
           */
          sourceId?: string;
        };
      };
    };
    responses: {
      /** @description Placeholder for likely-unused endpoints which are blocking apigw deployment */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  /** Generates and sends email to {user} reminding them of {station}'s current show */
  setUserReminder: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Filter by Station(Code). */
        stationCode: string;
        timeCode: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Reset user's password
   * @description Reset {user.email}'s password and send a reset email
   */
  resetUserPassword: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description User email */
        emaill: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * "schedule" but with Dadi ID
   * @description "schedule" but with Dadi ID
   */
  getScheduleDadiByDadiId: {
    parameters: {
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
        timeStart: string;
        timeEnd: string;
      };
    };
    responses: {
      /** @description Listen Again episodes, grouped by date */
      200: {
        content: {
          "*/*": components["schemas"]["DadiSchedule"];
        };
      };
    };
  };
  /** Get schedule object */
  getScheduleByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
        timeStart: string;
        timeEnd: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: components["schemas"]["Schedule"][];
          };
        };
      };
    };
  };
  /**
   * Retrieves/Saves user's settings
   * @description Retrieves or (or saves if {saveMode} is "save") user's settings
   */
  getUserSettings: {
    parameters: {
      path: {
        /** @description Save a user information if value is "save" */
        saveMode: string;
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Unique identifier for a ListenAPI Account */
        userId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Rebuild {streamUrl} and redirect to it
   * @description Rebuild {streamUrl} and redirect to it
   */
  setSharpstream: {
    parameters: {
      query: {
        /** @description Should be {streamUrl} value */
        i: string;
      };
    };
    responses: {
      /** @description Redirects to sharpstream endpoint */
      302: {
        content: {};
      };
    };
  };
  /** Get shows object. (AppCode OR BrandCode OR StationCode OR RegionCode parameter is required) */
  getShows: {
    parameters: {
      query?: {
        /** @description Filter by App(Code). <br> This parameter is incompatible with `BrandCode`, `RegionCode`, and `StationCode` parameters. */
        AppCode?: string;
        /** @description Filter by Region(Code). <br> This parameter is incompatible with -       `BrandCode`, `AppCode`, and `StationCode` parameters. */
        RegionCode?: string;
        /** @description Force deeplinks to use this AppCode. <br> This parameter is ONLY compatible with `RegionCode` parameters. */
        ForceAppCode?: string;
        /** @description Filter by Brand(Code). <br> This parameter is incompatible with `AppCode`, `RegionCode`, and `StationCode` parameters. */
        BrandCode?: string;
        /** @description Filter by Station(Code). <br> This parameter is incompatible with `BrandCode`, `AppCode`, and `RegionCode` parameters. */
        StationCode?: string;
        /** @description Filter response by type. */
        "type[]"?: ("podcast" | "boxset" | "listenagain_show")[];
        /** @description Alias for "order by recency" */
        latest?: boolean;
        /** @description Whether shows must be 'active' (has recently episodes) */
        is_active?: boolean;
        /** @description List shows with or without episodes. */
        onlyWithAudibles?: boolean;
        "_filter[is_featured]"?: number;
        "_filter[is_premium_only]"?: 0 | 1;
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
    };
    responses: {
      /** @description Return shows */
      200: {
        content: {
          "*/*": components["schemas"]["Show"][];
        };
      };
    };
  };
  /** Get a Shuttle Link object */
  getShuttlelinksById: {
    parameters: {
      path: {
        /** @description Parameter identifier should be a valid ShuttleLink ID. */
        identifier: number;
      };
    };
    responses: {
      /** @description Returns a ShuttleLink object */
      200: {
        content: {
          "*/*": components["schemas"]["ShuttleLink"];
        };
      };
    };
  };
  /** Create a Shuttle Link object for a specific entity. Device URLs will be auto-generated. */
  setShuttlelinkByEntity: {
    parameters: {
      path: {
        /** @description Parameter identifier should be a valid Entity Type */
        identifier:
          | "event"
          | "podcast"
          | "boxset"
          | "boxset_episode"
          | "listenagain"
          | "listenagain_show"
          | "podcast_episode";
      };
    };
    /** @description The ShuttleLink body request including extra entity details */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ShuttleLinkEntityTypeBody"];
      };
    };
    responses: {
      /** @description Returns created Shuttle Link object */
      200: {
        content: {
          "*/*": components["schemas"]["ShuttleLink"];
        };
      };
    };
  };
  /** Create a Shuttle Link object */
  postShuttlelinks: {
    /** @description The ShuttleLink body request */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ShuttleLinkBody"];
      };
    };
    responses: {
      /** @description Returns created Shuttle Link object */
      200: {
        content: {
          "*/*": components["schemas"]["ShuttleLink"];
        };
      };
    };
  };
  /** Get SignIn Incentive information for a Station */
  getSignInIncentivesForStation: {
    parameters: {
      path: {
        /** @description The Station to which the sign in incentive is attached to */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SignInIncentive"][];
        };
      };
    };
  };
  /** Get SignIn Incentive information for an App */
  getSignInIncentivesForApp: {
    parameters: {
      path: {
        /** @description The App to which the sign in incentive is attached to */
        appCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SignInIncentive"][];
        };
      };
    };
  };
  /**
   * Get list of all stations. Deprecated in favour of "getMinifiedStations"
   * @deprecated
   */
  getStationsByRegionCode: {
    parameters: {
      query?: {
        /** @description Filter stations by AppCode(s) */
        "AppCode[]"?: string[];
        /** @description Filter based on Station ID(s) */
        "StationId[]"?: number[];
        /** @description Filter based on Station Code(s) */
        "StationCode[]"?: ("radio" | "box set" | "television")[];
        /** @description Filter based on Station DADI ID(s). */
        "StationDADIId[]"?: string[];
        /** @description Only return stations with StationType of value(s) */
        "StationType[]"?: ("radio" | "box set" | "television")[];
        /** @description To request includable data, you can comma-seperate what you require in the include parameter, eg. ?include=parameter1,parameter2. */
        include?: (
          | "stationLatestEpisode"
          | "stationBrandRelated"
          | "stationRelated"
        )[];
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: string;
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
        /** @description Include Premium content in results */
        premium?: 0 | 1;
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Station"][];
        };
      };
    };
  };
  /**
   * Get list of all stations. Deprecated in favour of "getMinifiedStations"
   * @deprecated
   */
  getStations: {
    parameters: {
      query?: {
        /** @description Filter stations by AppCode(s) */
        "AppCode[]"?: string[];
        /** @description Filter based on Station ID(s) */
        "StationId[]"?: number[];
        /** @description Filter based on Station Code(s) */
        "StationCode[]"?: string[];
        /** @description Filter based on Station Code */
        StationCode?: string;
        /** @description Filter based on Station DADI ID(s). */
        "StationDADIId[]"?: string[];
        /** @description Only return stations with StationType of value(s) */
        "StationType[]"?: ("radio" | "box set" | "television")[];
        /** @description To request includable data, you can comma-seperate what you require in the include parameter, eg. ?include=parameter1,parameter2. */
        include?: ("stationBrandRelated" | "stationRelated" | "brand")[];
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: 0 | 1;
        /** @description Used to append premium stations to stationlist */
        premium?: 0 | 1;
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Station"][];
        };
      };
    };
  };
  /**
   * Get station code grouped by port
   * @description Get station code grouped by port
   */
  getStationsByPort: {
    responses: {
      /** @description Returns the PORT number as key and StationCode as value */
      200: {
        content: {
          "*/*": components["schemas"]["StationsByPort"];
        };
      };
    };
  };
  /** Get nowplaying / station on air data of stations */
  getNowPlayingAndOnAirForStations: {
    parameters: {
      query?: {
        /** @description Filter based on Station Code(s) */
        "StationCode[]"?: ("radio" | "box set" | "television")[];
        /** @description Filter based on Station DADI ID(s). */
        "StationDADIId[]"?: string[];
        /** @description Only return stations with StationType of value(s) */
        "StationType[]"?: ("radio" | "box set" | "television")[];
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: 0 | 1;
        /** @description Used to append premium stations to stationlist */
        premium?: 0 | 1;
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StationNowPlaying"][];
        };
      };
    };
  };
  /** Get list of all stations */
  getMinifiedStations: {
    parameters: {
      query?: {
        /** @description Filter stations by AppCode(s) */
        "AppCode[]"?: string[];
        /** @description Filter based on Station ID(s) */
        "StationId[]"?: number[];
        /** @description Filter based on Station Code(s) */
        "StationCode[]"?: ("radio" | "box set" | "television")[];
        /** @description Filter based on Station DADI ID(s). */
        "StationDADIId[]"?: string[];
        /** @description Only return stations with StationType of value(s) */
        "StationType[]"?: ("radio" | "box set" | "television")[];
        /** @description To request includable data, you can comma-seperate what you require in the include parameter, eg. ?include=parameter1,parameter2. */
        include?: ("stationBrandRelated" | "stationRelated" | "brand")[];
        /** @description Include test stations in the results (when requested work using internal IP). */
        test?: 0 | 1;
        /** @description Pagination: Page number */
        _p?: number;
        /** @description Pagination: Items per page */
        _pp?: number;
        /** @description Order data by provided parameter. Prefix with an "-" to order inversely. Endpoint must support. */
        _o?: string;
        /** @description Long-form version to filter data. Post-processes data, may conflict with request-specific parameters */
        "_filter[]"?: string[];
        /** @description Include Premium content in results */
        premium?: 0 | 1;
      };
      header?: {
        /** @description Required when using test parameter (Is it needed to be a valid IP address). */
        "X-Forwarded-For"?: string;
      };
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StationMinified"][];
        };
      };
    };
  };
  /**
   * Authenticated streams lookup endpoint
   * @description Returns stream auth level based on a respective stream url
   */
  streamAuthLevel: {
    parameters: {
      query: {
        /** @description Url that should match to return the expected level */
        StreamUrl: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StringResponse"];
        };
      };
    };
  };
  /**
   * Get tickets with Dadi ID
   * @description Retrieves "tickets" but with Dadi ID
   */
  getTicketsDadiByDadiId: {
    parameters: {
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Ticket"][];
        };
      };
    };
  };
  /**
   * Get tickets object
   * @description Retrieves tickets available (via. <a href="http://aloud.com/">Aloud.com)</a>
   */
  getTicketsByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code). */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Ticket"][];
        };
      };
    };
  };
  /**
   * DEPRECATED. Update a registration token.
   * @deprecated
   * @description DEPRECATED. Update a registration token.
   */
  updateToken: {
    parameters: {
      path: {
        registrationToken: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Remove a registration token.
   * @description Remove a registration token.
   */
  deleteToken: {
    parameters: {
      path: {
        registrationToken: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
  /**
   * Get travel with Dadi ID
   * @description "travel" but with a Dadi ID
   */
  getTrafficWarningsByDadiId: {
    parameters: {
      path: {
        /** @description Unique Station identifier for Publish */
        dadiCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Travel"][];
        };
      };
    };
  };
  /**
   * Get traffic warning information
   * @description Returns traffic warnings nearby to {station}
   */
  getTrafficWarningsByStationCode: {
    parameters: {
      path: {
        /** @description Filter by Station(Code) */
        stationCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Travel"][];
        };
      };
    };
  };
  /** @description List of utterances for this region, arranged by station, device type, and locale */
  getVoiceUtterancesByRegionCode: {
    parameters: {
      path: {
        /** @description ISO-3166-2 Region code */
        regionCode:
          | "GB"
          | "NO"
          | "DK"
          | "FI"
          | "SE"
          | "DE"
          | "GR"
          | "CY"
          | "RO"
          | "MD"
          | "PL"
          | "IE";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["StationUtterance"][];
        };
      };
    };
  };
  /**
   * Verifies user email
   * @deprecated
   * @description Verifies a user's email post-registration
   */
  verifyUserEmail: {
    parameters: {
      path: {
        /** @description Unique identifier for a Device */
        udid: string;
        /** @description Used by phone applications to identify their source type */
        appPlatform: string;
        /** @description Email address of an Account */
        email: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {};
      };
    };
  };
}
